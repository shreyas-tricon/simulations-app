define('Launcher', ['ajax', 'SideNavigation'], function(ajax, SideNavigation) {
    //require(['//dvninqhj78q4x.cloudfront.net/dexterjs/dexterjs.min.js']); // loading dexterJS
       // test for svn setup
    if (document.domain.search('ck12.org') != '-1') {
        document.domain = 'ck12.org';
    }

    var referrer, launcherURL, launcherOnlyURL, landing_referrer, homeSourcePath, filterType, anySimDownloaded = false,
        downloadedMode = false,
        downloadedSims = [];
    launcherURL = launcherOnlyURL = window.location.href;
    if (launcherURL.indexOf('referrer=') > -1) {
        if (launcherURL.indexOf('referrer=simulation') > -1) {
            landing_referrer = launcherURL.slice(launcherURL.indexOf('simulationName=') + 15, launcherURL.length);
        } else if (launcherURL.indexOf('referrer=teacher') > -1) {
            landing_referrer = "teacher_landing";
        } else if (launcherURL.indexOf('referrer=student') > -1) {
            landing_referrer = "student_landing";
        }

        //launcherOnlyURL = launcherURL.slice(0  , launcherURL.indexOf('?referrer=')) ;
        launcherOnlyURL = window.location.origin + window.location.pathname;
    }
    //homeSourcePath = launcherOnlyURL.slice(0,launcherOnlyURL.indexOf('/index.html'));
    homeSourcePath = window.location.origin + window.location.pathname.split("index.html")[0];
    //Device compatibility screen
    var deviceCompatibilityAlertScreen = document.createElement('div');
    deviceCompatibilityAlertScreen.id = "deviceCompatibilityAlert";
    deviceCompatibilityAlertScreen.classList.add('device-alert');
    deviceCompatibilityAlertScreen.classList.add('hide');
    deviceCompatibilityAlertScreen.innerHTML = '<div class="device-message"></div><div class="device-error-message">Our simulations are compatible with tablets, laptops and desktops.</div>';
    document.getElementsByTagName('body')[0].appendChild(deviceCompatibilityAlertScreen);
    var minDeviceWidth = 700;
    if (((window.outerWidth > window.outerHeight) && (window.outerWidth < minDeviceWidth)) || ((window.outerWidth < window.outerHeight) && (window.outerHeight < minDeviceWidth)) || navigator.userAgent.match(/(iPhone|iPodN)/g)) {
        deviceCompatibilityAlertScreen.classList.remove('hide');
        if (window.outerWidth > window.outerHeight) {
            document.getElementsByClassName('device-message')[0].style.marginTop = "8%";
        }
        deviceCompatibilityAlertScreen.ontouchmove = function(e) {
            e.preventDefault();
        };
        return;
    }


    var userInfo, checkForUserCredentials;
    var bodyParent = document.getElementsByTagName('body')[0],
        coverHtml, scrollX = 0,
        simData, eidsData, stdData, thumbnailCollection, searchClick, scrollContainer, sideNav, sideNav2, conceptsArray = [],
        standardsArray = [],
        nameOfStandards = [],
        nameOfConcepts = [];

    ajax.loadURL(window.API_SERVER_URL + "/auth/get/info/my", {
        "withCredentials": true,
        "callback": checkForUserCredentials
    });

    function checkForUserCredentials(response) {
        if (response !== "") {
            var res;
            userInfo = response;

            res = JSON.parse(response);
            window.localStorage.setItem("AuthUserInfo", response);

            if (res.responseHeader.status !== 0) {
                // window.location = "https://www.ck12.org/auth/signin?returnTo="+encodeURIComponent(window.location.href);
            } else {}
            /****** DexterJs config Update ******/
            /*dexterjs.set("config", {
	                 clientID: 24839961 ,
	                 memberID : res.response.id ,
	                 trackPageTime: false ,
	                 apis: {
	                     recordEvent: ("http://www.ck12.org/dexter/record/event"),
	                     recordEventBulk: ("http://www.ck12.org/dexter/record/event/bulk"),
	                     recordEventBulkZip: ("http://www.ck12.org/dexter/record/event/bulk/zip")
	                 }
	             });
	            
	    		dexterjs.logEvent("FBS_SIMULATION_BROWSE", {
	                referrer : landing_referrer ,
	            });
	        	/****** DexterJs config Update ******/
        }



    }

    var init_cover, init_simData;
    ajax.loadURL('html/cover.html', {
        "callback": init_cover
    });

    function _loadUserProfile() {


        if (!/^[\],:{}\s]*$/.test(localStorage.reader_app_config.replace(/\\["\\\/bfnrtu]/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
            this.info = {};
            this.info.userImage = false;
            return false;
        }
        var info = JSON.parse(localStorage.reader_app_config);
        this.info = info;


        /*   */
        /****** DexterJs config Update ******/
        /*
        	            dexterjs.set("config", {
        	                memberID   : this.info.id ,
        	            });
        	            */
        /****** DexterJs config Update ******/

        if (!info.email) {
            this.info.userImage = false;
            return false;
        }

        if (!info.userImage) {
            info.userImage = 'assets/images/user_icon.png'; // : 'http://interactives.ck12.org/simulations/common/allspark/1.0.5/assets/images/avatar_female.png';
        }
        if (typeof String.prototype.startsWith != 'function') {
            String.prototype.startsWith = function(str) {
                return this.indexOf(str) === 0;
            };
        }
        var urlData = info.userImage;
        var flxUrl = '/flx/show/image';
        if (urlData.startsWith(flxUrl)) {
            info.userImage = urlData.replace("/flx/show/image", window.API_SERVER_URL + "/flx/show/image");
        }
        //	          this.info = info;
        this.info.userImage = info.userImage;
        //toolbarOptions.userAvatar = this.info.userImage;
        document.getElementsByClassName("user-avatar-image")[0].src = this.info.userImage;
        document.getElementsByClassName("name")[0].innerHTML = this.info.userName;
        document.getElementsByClassName("email")[0].innerHTML = this.info.email;
        document.querySelector("#UserProfileView img").src = this.info.userImage;
        //that.toolBarView = new ToolBarView(toolbarOptions);
        this.userProfile = true;
        /*        this.UserProfileView = new UserProfileView(info);
                this.addView({
                    'UserProfileView': this.UserProfileView
                });
                this.showView('UserProfileView');
                this.viewObjs['ToolBarView'].updateUser(toolbarOptions);*/


    }

    function openSignOut(e) {
        e.preventDefault();
        e.stopPropagation();

        setTimeout(function() {
            document.querySelector("#UserProfileView").classList.remove('hide')
            document.getElementById("UserProfileView").addEventListener("click", function(e) {
                e.stopPropagation();
            }, false);
        }, 500)



    }

    function goToLogin(e) {
        if (checkDeviceConnectivity()) {
            e.preventDefault();
            e.stopPropagation();
            readerAppHelper.logout(function(data) {

                readerAppHelper.clearUserInfo();
                window.location.href = "../auth/login.html"
            });
        } else {
            showErrorMessage();
        }
    }

    function init_cover(responseText) {
        var onlineMode = checkDeviceConnectivity();
        coverHtml = responseText;
        bodyParent.innerHTML = coverHtml;
        // _loadUserProfile();

        document.getElementsByClassName('close-modal')[0].addEventListener('click', closeIframe, false);
        document.getElementsByClassName('clear-box')[0].addEventListener('click', clearFilter, false);
        document.getElementsByClassName('nav-bottom')[0].addEventListener('click', deselectAllFilter, false);
        document.getElementsByClassName('clear-item')[0].classList.add('hide-back');

        document.getElementsByClassName("user-avatar")[0].addEventListener("click", openSignOut, false)
        document.getElementsByClassName("signout")[0].addEventListener("click", goToLogin, false);
        document.getElementsByClassName("signout")[0].addEventListener("touch", goToLogin, false)

        document.getElementsByClassName("user-profile-container")[0].addEventListener("click touch", function() {

                e.preventDefault();
                e.stopPropagation();
            }, false)
            /* copy this code for ios for msg*/
        ErrorMsgWindow = document.getElementById("MessageView");
        ErrorMsgClose = document.getElementById('msgModalClose');
        /* copy this code for ios for msg*/
        ErrorMsgWindow.addEventListener('touchmove', function(e) {
            e.preventDefault();
            e.stopPropagation();
        }, false);
        ErrorMsgWindow.addEventListener('scroll', function(e) {
            e.preventDefault();
            e.stopPropagation();
        }, false);
        ErrorMsgClose.addEventListener('click', closeErrorMsg, false);

        filterWindow = document.getElementsByClassName("filter-container")[0];
        filterWindow.addEventListener('scroll', function(e) {
            document.body.classList.add("freez");
            //	document.getElementsByTagName("body")[0].style.overflow="hidden"
            /*	var e0 = e.originalEvent,
	        delta = e0.wheelDelta || -e0.detail;
	    
			this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;
			e.preventDefault();*/

        }, false);
        /************** video code ************/

        var InstructionVideo,
            offlineTab /**Code for delete **/ ,
            InstructionTutorial,
            InstructionClose,
            fullScreenInstruction,
            iframeParent,
            fullScreen = false,
            instructionVideoFrame,
            b
        videoUrl = "https://www.youtube.com/embed/cmdBI54ew3M";

        InstructionVideo = document.getElementsByClassName('InstructionVideo-screen')[0];
        offlineTab = document.getElementById('offlineTab'); /**Code for delete **/ ;
        InstructionTutorial = document.getElementsByClassName('instructor-tutorial')[0];
        InstructionClose = document.getElementsByClassName('instruction-close')[0];
        //		fullScreenInstruction = document.getElementsByClassName('full-screen-icon')[0] ;
        iframeParent = document.getElementsByClassName('iframe-parent')[0];
        instructionVideoFrame = document.getElementsByClassName('instruction-video-frame')[0];
        InstructionTutorial.addEventListener('click', initInstructionVideo, false);
         	document.getElementById("zoom-button").addEventListener("click",zoom_in_out_workSheet,false)                                                                                                                                                                                                    
        iframeParent.addEventListener('touchmove', function(e) {
        	e.stopPropagation();
        }, false);
        InstructionVideo.addEventListener('touchmove', function(e) {
        	e.stopPropagation();
        }, false);
        InstructionVideo.addEventListener('scroll', function(e) {
        	e.stopPropagation();
        }, false);

        InstructionClose.addEventListener('click', closeInstructionVideo, false);
                                                                                                                                                                                                             $("a[target='_blank']").click(function(e){
                                                                                                                                                                                                                                           e.preventDefault();
                                                                                                                                                                                                                                           window.open($(e.currentTarget).attr('href'), '_system', '');
                                                                                                                                                                                                                                           });
                                                                                                                                                                                                             
        //		fullScreenInstruction.addEventListener('click',togglefullScreen,false);
        function initInstructionVideo(e) {
            document.getElementsByClassName("instruction-title")[0].innerHTML = "SIM Instruction Tutorial";
            document.getElementsByClassName("instruction-title")[0].classList.remove("worksheet-title");
            document.getElementById("instructionContainer").classList.remove("padding-zero");
            if (checkDeviceConnectivity()) {
                e.stopPropagation();
                //document.body.classList.add("freez");
                //document.getElementsByTagName("body")[0].style.overflow="hidden";
                if (document.getElementById("UserProfileView").classList.contains('hide')) {
                    instructionVideoFrame.setAttribute('src', videoUrl);
                    InstructionTutorial.classList.add('hide-back');
                    InstructionVideo.classList.remove('hide');
                    setTimeout(function() {
                        document.getElementsByClassName("instruction-video-frame")[0].contentWindow.document.body.ontouchmove = function(e) {
                            e.preventDefault();
                        }

                    }, 1000);
                }

            } else {
                                                                                                                                                                                        showErrorMessage();
            }


        }

        function closeInstructionVideo(e) {
            //document.body.classList.("freez");
            //document.getElementsByTagName("body")[0].style.overflow="auto"
            // var frameDoc = 	instructionVideoFrame.contentDocument || instructionVideoFrame.contentWindow.document;
            //instructionVideoFrame.removeChild(frameDoc.documentElement);
        	hideWorkSheeet();
            instructionVideoFrame.contentDocument.documentElement.innerHTML = ""
            instructionVideoFrame.setAttribute('src', " ");
            InstructionTutorial.classList.remove('hide-back');
            InstructionVideo.classList.add('hide');

        }
        var worksheet_zoom = false
        function zoom_in_out_workSheet(){
            if(worksheet_zoom == false){
                fullScreenApi.requestFullScreen(document.getElementsByClassName('iframe-parent')[0])//.zoom-iframe-worksheet
                document.getElementsByClassName('iframe-parent')[0].classList.add("zoom-iframe-worksheet")
            }else{
                fullScreenApi.cancelFullScreen(document.getElementsByClassName('iframe-parent')[0]);
                document.getElementsByClassName('iframe-parent')[0].classList.remove("zoom-iframe-worksheet")
                worksheet_zoom = false;
            }
        }
                                                                                                                                                                                                             
        function togglefullScreen(e) {
            fullScreen = !fullScreen;
            if (fullScreen) {
                iframeParent.classList.add('full-screen-view');
                e.currentTarget.innerHTML = "Exit full screen";
            } else {
                iframeParent.classList.remove('full-screen-view');
                e.currentTarget.innerHTML = "Full screen";
            }
        }
        offlineTab.addEventListener('touchstart', initOfflineTab, false) /**Code for delete **/ ;
        /**Code for delete **/
        function initOfflineTab(e) {
            e.stopPropagation();
            if (!offlineTab.classList.contains('toggle-button-selected')) {
                sideNav.unselectAllCheckBox();
                if (sideNav2) sideNav2.unselectAllCheckBox();
                offlineTab.classList.add('toggle-button-selected');
                //offlineTab.classList.remove('inactive');
                searchClick.value = "";
                downloadedMode = true;
                showOfflineSims();
            } else {
                //offlineTab.classList.add('inactive');
                sideNav.unselectAllCheckBox();
                if (sideNav2) sideNav2.unselectAllCheckBox();
                offlineTab.classList.remove('toggle-button-selected');
                searchClick.value = "";
                downloadedMode = false;
                showAll();
            }
            document.getElementsByClassName('no-match-found')[0].classList.add('hide');
        }

        /**Code for delete **/

        /************** video code ************/
        $.ajax({
            "url": window.API_SERVER_URL + "/flx/search/direct/modality/minimal/simulationint/internaltags.ext:featured?specialSearch=true&format=json'",
            "success": function(response) {
                response = JSON.parse(response);
                if (response.responseHeader.status === 0) {
                    var abc = JSON.stringify(response.response.Artifacts.result)
                    localStorage.setItem("featured-sim", abc);
                } else {
                    console.log("error")
                }
            },
            "error": function(response) {
                console.log(response);
            }
        });
        setTimeout(function() {
            if (JSON.parse(localStorage.getItem("featured-sim")).length > 0) {
                var temp_array = JSON.parse(localStorage.getItem("featured-sim"));
                ajax.loadURL('json/simulationsData.json', {
                    //Featured sim API "http://gamma.ck12.org/flx/search/direct/modality/minimal/simulationint/internaltags.ext:featured?specialSearch=true&format=json"
                    "callback": function(responseText) {
                        console.log(temp_array);
                        simData = JSON.parse(responseText);
                        console.log(simData.simulations.length)
                        console.log(simData)
                        var fSSimArray = [];
                        for (var i = 0; i < temp_array.length; i++) {
                            simData.simulations.filter(function(obj, index) {
                                if (obj.artifactID == JSON.parse(temp_array[i].id)) {
                                    //										simData.simulation.splice(i,1);
                                    var fs = simData.simulations.splice(index, 1);
                                    fSSimArray.push(fs[0]);
                                }

                            })
                        }
                        simData.simulations = fSSimArray.concat(simData.simulations);
                        console.log(simData.simulations.length)
                        console.log(simData)
                        init_simData();
                        //ajax.loadURL('json/standardsData.json',{
                        ajax.loadURL('http://www.ck12.org/api/flx/get/branch/standards?set=NGSS&branch=SCI.PHY', {
                            "callback": setStandardObject
                        });
                    }
                });
            } else {
                ajax.loadURL('json/simulationsData.json', {
                    //Featured sim API "http://gamma.ck12.org/flx/search/direct/modality/minimal/simulationint/internaltags.ext:featured?specialSearch=true&format=json"
                    "callback": function(responseText) {
                        console.log(featuredSim);
                        simData = JSON.parse(responseText);
                        init_simData();
                        //ajax.loadURL('json/standardsData.json',{
                        ajax.loadURL('http://www.ck12.org/api/flx/get/branch/standards?set=NGSS&branch=SCI.PHY', {
                            "callback": setStandardObject
                        });
                    }
                });
            }
        }, 3000);



        function setStandardObject(responseText) {

            localStorage.setItem("saved-standards", responseText);
            stdData = JSON.parse(responseText);
            createSimCards();
            arrangeStandards();
            document.getElementsByClassName('no-match-found')[0].classList.add('hide');

        }

        function init_standardsData() {}

        function checkForDownloadedSims() {

        }

    };

    /************** error Msg code ************/


    function showErrorMessage(e) {
        /*e.stopPropagation();*/
        event.stopPropagation()
        ErrorMsgWindow.classList.remove('hide');
    };

    function closeErrorMsg(e) {
        e.stopPropagation();
        ErrorMsgWindow.classList.add('hide');
    };

    /************** error Msg code ************/
    var scrolling = false;
    var xStart, yStart = 0;

    function init_simData() {

        thumbnailCollection = document.getElementsByClassName('thumbnail-view-holder')[0];

        searchClick = document.getElementsByClassName('header-input')[0];
        searchClick.addEventListener('click', doNothing, false);
        searchClick.addEventListener('touchstart', doNothing, false);
        searchClick.addEventListener('keyup', searchItem, false);
        searchClick.onpaste = function() {

            setTimeout(function() {
                searchItem();
            }, 500);
        }

        scrollContainer = document.getElementsByTagName('header')[0];

        document.ontouchmove = function(e) {
            e.preventDefault();
        };
        document.getElementsByClassName('main-container')[0].ontouchstart = function(event) {
            this.allowUp = (this.scrollTop > 0);
            this.allowDown = (this.scrollTop < this.scrollHeight - this.clientHeight);
            this.prevTop = null;
            this.prevBot = null;
            this.lastY = event.pageY;
        }
        document.getElementsByClassName('main-container')[0].ontouchmove = function(event) {
            var up = (event.pageY > this.lastY),
                down = !up;
            this.lastY = event.pageY;

            if ((up && this.allowUp) || (down && this.allowDown)) event.stopPropagation();
            else event.preventDefault();
        }
                                                                                                                                                                                                             
                                                                                                                                                                                                             

        document.getElementsByClassName("modal-window")[0].ontouchmove = function(e) {
            e.preventDefault();
            e.stopPropagation();
        }
        document.getElementsByClassName("i-frame-cont")[0].ontouchmove = function(e) {
            e.preventDefault();
        }

        /*	document.body.ontouchmove =  function (event) {
			var up = (event.pageY >= this.slideBeginY);
    			var down = (event.pageY < this.slideBeginY);
    			this.slideBeginY = event.pageY;
    			if ((up && this.allowUp) || (down && this.allowDown)) {
        			event.stopPropagation();
    			}
    			else {
        			event.stopPropagation();
    			}
		
		};*/
        /*document.body.ontouchstart  =  function (event) {
			  this.allowUp = (this.scrollTop >= 0);
    				this.allowDown = (this.scrollTop < this.scrollHeight - this.clientHeight);
    				this.slideBeginY = event.pageY;
		}*/


        document.getElementsByClassName('main-container')[0].addEventListener('scroll', scrollSims, false);
        //document.getElementsByClassName('main-container')[0].ontouchmove = function(e){e.stopPropagation();}
        document.getElementsByClassName('filter-section')[0].ontouchmove = function(e) {
            e.preventDefault();
        }

        document.getElementsByClassName("filter-tab")[0].addEventListener("click", filter, false)
        conceptNavParent = document.getElementsByClassName('concept-filter')[0];
        conceptNavParent.classList.add('concept-filter-list');
        standardsNavParent = document.getElementsByClassName('standard-filter')[0];
        standardsNavParent.classList.add('standards-filter-list');
        document.getElementsByTagName("body")[0].addEventListener('click', collapseSearch, false);
        document.getElementsByTagName("body")[0].addEventListener('touchstart', collapseSearch, false);
        document.addEventListener("keydown", logPressedKeys, false);

        ajax.loadURL('json/eids.json', {
            "callback": init_conceptData

        });

        function filter(e) {
            /*for(var i = 0;i<document.getElementsByClassName("sort-item").length;i++){
            	document.getElementsByClassName("sort-item")[i].classList.remove("hide");
            }*/
            e.stopPropagation();
            if ((document.getElementsByClassName("filter-main-wrapper")[0].classList.contains("go-left")))
                document.getElementsByClassName("filter-main-wrapper")[0].classList.remove("go-left");
            setTimeout(function() {
                var filterContHeight = window.innerHeight - 140;
                //				if(document.getElementsByClassName("filter-container")[0].style.height != filterContHeight +"px")
                document.getElementsByClassName("filter-container")[0].style.height = filterContHeight + "px";
            }, 1000);

        }

        function init_conceptData(responseText) {
            document.getElementsByClassName("header-input")[0].disabled = false;
            eidsData = JSON.parse(responseText);

            createSimCards();
            arrangeConcepts();
            //arrangeStandards();

            for (var groupCount = 0; groupCount < newStandardsArray.length; groupCount++) {
                newStandardsArray[groupCount]["data"].sort();
            }

            document.getElementsByClassName("filter-main-wrapper")[0].addEventListener('click', doNothing, false);
            //			document.getElementsByClassName("filter-container")[0].style.height = window.innerHeight-140-39 +"px";
            document.getElementsByClassName("filter-container")[0].style.height = window.innerHeight - 140 + "px";

            document.getElementsByClassName("filter-menu-wrapper")[0].addEventListener('click', toggleExpand, false);
            document.getElementsByClassName("filter-menu-wrapper")[1].addEventListener('click', toggleExpand, false);
            document.getElementsByClassName("filter-main-wrapper")[0].addEventListener('touchstart', function(event) {
                this.allowUp1 = (this.scrollTop > 0);
                this.allowDown1 = (this.scrollTop < this.scrollHeight - this.clientHeight);
                this.prevTop1 = null;
                this.prevBot1 = null;
                this.lastY1 = event.pageY;
            }, false);
            document.getElementsByClassName("filter-main-wrapper")[0].ontouchmove = function(event) {

                var up = (event.pageY > this.lastY1),
                    down = !up;
                this.lastY1 = event.pageY;

                if ((up && this.allowUp1) || (down && this.allowDown1)) event.stopPropagation();
                else event.stopPropagation();
            }

            var options = {
                parent: conceptNavParent,
                data: newConceptsArray,
                simData: simData,
                search: function(names) {
                    showSearchedSimsWithConcepts(names);
                },
                setSearched: function(isConceptSelected) {
                    setConceptSelection(isConceptSelected);
                }
            };
            window.sidenav = new SideNavigation(options);
            sideNav = window.sidenav;
            var sideNavButton = document.getElementsByClassName('sort-box-concept')[0];
            sideNavButton.addEventListener('click', sideNav.openSideNavScreen.bind(sideNav), false);
            sideNavButton.addEventListener('touchstart', doNothing, false);
            document.addEventListener('click', sideNav.closeSideNavScreen.bind(sideNav), false);
            document.addEventListener('touchstart', sideNav.closeSideNavScreen.bind(sideNav), false);

            document.getElementsByClassName('back-arrow')[0].addEventListener('click', collapseSearch, false);

            checkIncomingUrl();

            if (window.innerWidth < 900) {
                var navPs = document.getElementsByClassName('sort-item');
                var navCs = document.getElementsByClassName('side-nav-screen');
                document.getElementsByClassName('clear-item')[0].style.paddingLeft = "10px";
                for (var i = 0; i < navPs.length; i++) {
                    navPs[i].style.width = '270px';
                    navCs[i].style.width = '270px';
                }
            }

        }
    }

    function checkDeviceConnectivity() {
        var state = navigator.onLine;
        return state;
    };

    function sprevent(e) {
        e.stopPropagation();
    }

    function checkIncomingUrl() {
        var queryString = [],
            conceptsPassed = [];

        if (window.location.search.split('?').length > 1) {
            var params = window.location.search.split('?')[1].split('&');
            for (var i = 0; i < params.length; i++) {
                var key = params[i].split('=')[0];
                var value = params[i].split('=')[1];
                queryString[key] = value;
            }
            if (queryString["backUrl"] != null) {
                backUrl = queryString["backUrl"];
                document.getElementsByClassName('back-button')[0].classList.remove('hide-back');
                document.getElementsByClassName('back-button')[0].addEventListener('click', goToBackUrl, false);
            }
            if (queryString["c"] != null) {
                var concepts = queryString["c"].split(",");
                for (var i = 0; i < concepts.length; i++) {
                    var fullConcept = concepts[i].split("%20");
                    concepts[i] = fullConcept[0];
                    for (var j = 1; j < fullConcept.length; j++) {
                        concepts[i] += " " + fullConcept[j];
                    }
                    conceptsPassed.push(concepts[i].toLowerCase());
                }
            }
            if (conceptsPassed.length != 0) {
                hideAll();
                showSearchedSimsWithConcepts(conceptsPassed);
                sideNav.selectCheckBox(conceptsPassed);
            }
        }
    }

    function goToBackUrl() {
        window.location.href = backUrl;
    }

    function doNothing(e) {
        e.stopPropagation();
        if (!(document.getElementsByClassName("filter-main-wrapper")[0].contains("go-left")) && !e.target.classList.contains("filter-menu-wrapper") && !e.target.parentElement.classList.contains("filter-menu-wrapper"))
            document.getElementsByClassName("filter-main-wrapper")[0].classList.add("go-left")
    }

    function toggleExpand(e) {
        e.stopPropagation();
        e.currentTarget.nextElementSibling.classList.toggle('hide');
        e.currentTarget.childNodes[1].classList.toggle('wrapper-plus-icon');
    }

    function createSimCards() {
        var offlineTab = document.getElementById('offlineTab'); /**Code for delete **/ ;
        thumbnailCollection.innerHTML = "";
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            createIthCard(simCount);
        }
        if (anySimDownloaded) {
            if (offlineTab.classList.contains('toggle-button-selected')) {
                offlineTab.classList.remove('toggle-button-selected');
                //offlineTab.classList.add('inactive');
            }
            document.getElementsByClassName('toggle-button-container')[0].classList.remove('hideOffline');
        } else {
            document.getElementsByClassName('toggle-button-container')[0].classList.add('hideOffline');
        }
    }

    function deselectAllFilter(e) {
        e.stopPropagation();
        sideNav.unselectAllCheckBox();
        sideNav2.unselectAllCheckBox();
        //this.showAll();
        //document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
        sideNav.setSearched(false);
        sideNav2.setSearched(false);
    }

    function logPressedKeys(e) {
        console.log(e.keyCode);
        if (e.keyCode == 13) {
            e.preventDefault();
            console.log('Enter spotted: prevent!');
            temp = document.activeElement;
            //console.log(temp);
            temp.blur();
            return false;
        }
        return true;
    }

    function clearFilter(e) {
        e.stopPropagation();
        sideNav.unselectAllCheckBox();
        //sideNav2.unselectAllCheckBox();
        showAll();
        document.getElementsByClassName('clear-item')[0].classList.add('hide-back');

        if (searchClick.value) {
            document.getElementsByClassName('no-match-found')[0].classList.add('hide');
            searchClick.value = '';
        }
        simSelected = false;
        nameOfConcepts = [], nameOfStandards = [];
    }

    function showOfflineSims() {
        hideAll();
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
                simURL = simData["simulations"][simCount].simulationUrl,
                //			var simURL = simData["simulations"][simCount].simulationUrl,
                simName = simURL.split('/')[0];
            if (window.localStorage.getItem(simName)) {
                //			if(simName==='irwin-2d' || simName==='doppler-ducks'){
                showDownloaded(simCount);
                notFound = false;
            }
        }
    }

    function showDownloaded(simCount) {
        var card = document.getElementsByClassName('thumbnail-view')[simCount],
            cardDelete = document.getElementsByClassName('tile-delete')[simCount],
            cardDownload = document.getElementsByClassName('tile-download')[simCount];
        card.classList.remove('hide-back');
        cardDelete.classList.remove('hide');
        cardDownload.classList.add('hide');
    }

    function createIthCard(simCount) {
        window.windowHeight = window.innerHeight;
        window.windowWidth = window.innerWidth;
        var card = document.createElement("div");
        card.classList.add('thumbnail-view');
        card.classList.add('thumbnail-view' + simCount);
        thumbnailCollection.appendChild(card);

        var cardImage = document.createElement("div");
        cardImage.classList.add('tile-image');
        card.appendChild(cardImage);
        cardImage.style.backgroundImage = "url(" + simData["simulations"][simCount].thumbnailUrl + ")";
        //cardImage.style.backgroundImage = "url(http://simtest.ck12.org/simulations/repository/"++")";

        if (simData["simulations"][simCount].simulationUrl.match(/gamma.ck12.org/i)) {
            cardImage.style.backgroundImage = "url(" + simData["simulations"][simCount].thumbnailUrl + ")";
        }
        if (simData["simulations"][simCount].simulationUrl == "") {
            cardImage.classList.add('comming-soon');
        }

        cardImage.setAttribute("id", simData["simulations"][simCount].name);

        var cardImageName = document.createElement("div");
        cardImageName.classList.add('tile-image-name');
        cardImage.appendChild(cardImageName);

        var simName = document.createElement("span");
        simName.classList.add('sim-title');
        simName.innerHTML = simData["simulations"][simCount].name;
        cardImageName.appendChild(simName);

        var cardDownload = document.createElement("div");
        cardDownload.classList.add('tile-download');
        cardImage.appendChild(cardDownload);
        cardDownload.addEventListener('click', downloadSim, false);

        /*Code for delete */
        var cardDelete = document.createElement("div");
        cardDelete.classList.add('tile-delete');
        cardDelete.classList.add('hide');
        cardImage.appendChild(cardDelete);
        cardDelete.addEventListener('click', deleteSim, false);
        /*Code for delete */

        var simDesc = document.createElement("div");
        simDesc.classList.add('sim-desc');
        card.appendChild(simDesc);

        var simCovers = document.createElement("div");
        simCovers.classList.add('sim-covers-desc');
        simDesc.appendChild(simCovers);

        var simConceptsCover = document.createElement("div");
        simConceptsCover.classList.add('sim-covers');
        simCovers.appendChild(simConceptsCover);

        var simConcepts = document.createElement("div");
        simConcepts.classList.add('sim-covers-concepts');
        simConceptsCover.appendChild(simConcepts);
        simConcepts.innerHTML = "<span class='sim-info sim-covers-focused'>CONCEPTS</span>";
        simConcepts.addEventListener('click', showCovers, false);

        var simStandardsCover = document.createElement("div");
        simStandardsCover.classList.add('sim-covers');
        simCovers.appendChild(simStandardsCover);

        var simStandards = document.createElement("div");
        simStandards.classList.add('sim-covers-standards');
        simStandardsCover.appendChild(simStandards);
        simStandards.innerHTML = "<span class='sim-info'>STANDARDS</span>";
        simStandards.addEventListener('click', showCovers, false);

        var simConceptsTags = document.createElement("div");
        simConceptsTags.classList.add('sim-covers-tags');
        simDesc.appendChild(simConceptsTags);


        var simStandardsTags = document.createElement("div");
        simStandardsTags.classList.add('sim-covers-tags');
        simStandardsTags.classList.add('sim-covers-tags-s');
        simDesc.appendChild(simStandardsTags);
        var simConceptsTagsChild = document.createElement("div");
        simConceptsTagsChild.classList.add('sim-covers-tags');
        simConceptsTagsChild.classList.add('sim-sim-cover');
        simConceptsTags.appendChild(simConceptsTagsChild);
                                                                                                                                                                                                             simConceptsTags.ontouchstart = function(event) {
                                                                                                                                                                                                             this.allowUp = (this.scrollTop > 0);
                                                                                                                                                                                                             this.allowDown = (this.scrollTop < this.scrollHeight - this.clientHeight);
                                                                                                                                                                                                             this.prevTop = null;
                                                                                                                                                                                                             this.prevBot = null;
                                                                                                                                                                                                             this.lastY = event.pageY;
                                                                                                                                                                                                             }
                                                                                                                                                                                                             simConceptsTags.ontouchmove = function(event) {
                                                                                                                                                                                                             var up = (event.pageY > this.lastY),
                                                                                                                                                                                                             down = !up;
                                                                                                                                                                                                             this.lastY = event.pageY;
                                                                                                                                                                                                             
                                                                                                                                                                                                             if ((up && this.allowUp) || (down && this.allowDown)) event.stopPropagation();
                                                                                                                                                                                                             else event.preventDefault();
                                                                                                                                                                                                             }
                                                                                                                                                                                                             
        var simStdDescView = document.createElement("div");
        simStdDescView.classList.add('sim-std-desc-view');
        simStdDescView.classList.add('hide');
        simDesc.appendChild(simStdDescView);
        if (simData["simulations"][simCount].document_id) {

            var simRes = document.createElement("div");
            simRes.classList.add('sim-covers-res');
            simDesc.appendChild(simRes);
            simRes.addEventListener('click', initWorkSheet, false)

            var simResources = document.createElement("div");
            simResources.classList.add('sim-covers-resources');
            simRes.appendChild(simResources);
            simResources.innerHTML = "<span class='sim-info'>RESOURCES</span>";

            var simResArrow = document.createElement("div");
            simResArrow.classList.add('sim-res-arrow');
            simRes.appendChild(simResArrow);
        } else {
            simConceptsTags.classList.add('no-resources');
            card.classList.add('no-resources');
        }

        for (var simConceptCount = 0; simConceptCount < simData["simulations"][simCount].concepts.length; simConceptCount++) {
            var simConceptName = document.createElement("a");
            simConceptsTagsChild.appendChild(simConceptName);
            var conceptId = simData["simulations"][simCount].concepts[simConceptCount];

            if (simConceptCount < (simData["simulations"][simCount].concepts.length - 1)) {
                setConceptName(conceptId);
                simConceptName.innerHTML = " " + simConceptsName;

                var simConceptSeperator = document.createElement("span");
                simConceptsTagsChild.appendChild(simConceptSeperator);
                simConceptSeperator.innerHTML = ",";
            } else {
                setConceptName(conceptId);
                simConceptName.innerHTML = " " + simConceptsName;
            }
            //simConceptName.setAttribute("href","http://www.ck12.org/Physics/"+simConceptsHandle);
            simConceptName.refValue = simConceptsHandle;
            simConceptName.addEventListener('click', function() {
                openIframe(this);
                /*if(checkDeviceConnectivity()){
                	openIframe(this);
                }else{
                	showErrorMessage();
                }*/
            }, false);

            if (stdData && stdData.response.concepts[conceptId]) {
                var standardId = stdData.response.concepts[conceptId].standards;
                setStandardName(standardId);
            }
        }

        if (standardIds.length > 0) {
            for (var simStandardCount = 0; simStandardCount < standardIds.length; simStandardCount++) {
                var simStandardName = document.createElement("a");
                simStandardsTags.appendChild(simStandardName);

                if (simStandardCount < (standardIds.length - 1)) {
                    simStandardName.innerHTML = " " + simStandardsName[simStandardCount];

                    var simStandardSeperator = document.createElement("span");
                    simStandardsTags.appendChild(simStandardSeperator);
                    simStandardSeperator.innerHTML = ",";
                } else {
                    simStandardName.innerHTML = " " + simStandardsName[simStandardCount];
                }
                simStandardName.refValue = simStandardsDesc[simStandardCount];
                simStandardName.addEventListener('click', showStdDesc, false);
            }
        } else {
            simStandardsCover.classList.add('hide-back');
        }
        standardIds = [], standardDesc = [], firstSimStandard = true;
        var simURL = simData["simulations"][simCount].simulationUrl;
        var simName = simURL.split('/')[0];
        if (window.localStorage.getItem(simName)) {
            //		if(simName==='irwin-2d' || simName==='doppler-ducks'){
            cardDownload.classList.add("downloaded");
            downloadedSims.push(simName);
            anySimDownloaded = true;
        } else {
            cardDownload.classList.remove("downloaded");
        };

        downloadedSims = downloadedSims.filter(function(elem, pos) {
            return downloadedSims.indexOf(elem) == pos;
        });

        cardImage.addEventListener('click', openSim, false);

        document.getElementsByClassName('sim-covers-concepts')[simCount].addEventListener('click', showConcepts, false);
        document.getElementsByClassName('sim-covers-standards')[simCount].addEventListener('click', showStandards, false);
        simStandardsTags.classList.add('hide-back');
    }

    function showConcepts(e) {
        e.currentTarget.parentElement.parentElement.parentElement.childNodes[2].classList.add('hide-back');
        e.currentTarget.parentElement.parentElement.parentElement.childNodes[1].classList.remove('hide-back');
    }

    function showStandards(e) {
        e.currentTarget.parentElement.parentElement.parentElement.childNodes[1].classList.add('hide-back');
        e.currentTarget.parentElement.parentElement.parentElement.childNodes[2].classList.remove('hide-back');
    }

    var lastSimStdShowed, lastSimStd;

    function showStdDesc(e) {
        e.stopPropagation();
        if (lastSimStdShowed) {
            lastSimStdShowed.classList.add('hide');
            lastSimStd.style.fontWeight = 'normal';
        }

        lastSimStdShowed = e.currentTarget.parentElement.parentElement.childNodes[3];
        lastSimStdShowed.classList.remove('hide');
        lastSimStdShowed.innerHTML = e.currentTarget.refValue;

        lastSimStd = e.currentTarget;
        lastSimStd.style.fontWeight = 'bold';
    }

    function showCovers(e) {
        var isTabType;
        for (var i = 0; i < 2; i++) {
            e.currentTarget.parentElement.parentElement.childNodes[i].childNodes[0].childNodes[0].classList.remove('sim-covers-focused');
        }
        e.currentTarget.childNodes[0].classList.add('sim-covers-focused');

        if (e.target.innerHTML.indexOf('STANDARDS') > -1) {
            isTabType = "standards";
        } else if (e.target.innerHTML.indexOf('CONCEPTS') > -1) {
            isTabType = "concept";
        }

        /*dexterjs.logEvent("FBS_SIMULATION_TILE_TAB", {
			I 
			"tabType" : isTabType
          
        });*/

    }
    /***********************************************WorkSheet intigration******************************************************/
    var artifact_Document = [];

    function hideWorkSheeet() {
        document.getElementsByClassName('instruction-video-frame')[0].contentDocument.documentElement.innerHTML = "";
        document.getElementById("instructionContainer").classList.remove("padding-zero");
        document.getElementsByClassName("instruction-title")[0].innerHTML = "";
        document.getElementById("seprate").classList.add("hide");
        document.getElementsByClassName("instruction-title")[0].classList.remove("worksheet-title");
    }

    function showWorkSheeet() {
        document.getElementsByClassName("filter-main-wrapper")[0].classList.add("go-left");
        document.getElementById("instructionContainer").classList.add("padding-zero");
        document.getElementsByClassName("instruction-title")[0].innerHTML = "Worksheet";
        document.getElementsByClassName("instruction-title")[0].classList.add("worksheet-title");
        document.getElementById("seprate").classList.remove("hide");
        document.getElementsByClassName('instructor-tutorial')[0].classList.add('hide-back');
        document.getElementsByClassName('InstructionVideo-screen')[0].classList.remove('hide');
    }

    function checkDocument(name) {
        var available = false,
            output = {},
            id = "";
        simData.simulations.filter(function(obj) {
            if (obj.name == name) {
                available = true;
                id = obj.document_id || "f84a1133dfb746e7a758bb90e06a0eec"
            }
        })
        output = {
            "available": available,
            "document_id": id
        };
        return output
    }

    function initWorkSheet(e) {

        if (!checkDeviceConnectivity()) {

            showErrorMessage();
        } else {
            console.log(e.target);
            e.stopPropagation();
            var artifactID = "",
                name = '';
            showWorkSheeet();

            simData.simulations.forEach(function(elem, i) {
                    if ((e.target.parentElement.parentElement.previousSibling ? elem.name === e.target.parentElement.parentElement.previousSibling.id : false) || (e.target.parentElement.parentElement.parentElement.previousSibling ? elem.name === e.target.parentElement.parentElement.parentElement.previousSibling.id : false) || (e.target.parentElement.previousSibling ? elem.name === e.target.parentElement.previousSibling.id : false)) {
                        artifactID = simData.simulations[i].artifactID;
                        name = elem.name;
                        avl_doc_id = simData.simulations[i].document_id || "";
                    }


                })
                //var avl_doc  = checkDocument(name);
            getWorkSheetSession(avl_doc_id);

        }



    }
    /*** to get document id****/
    function initiateWorkSheetDoc(artifactID, name) {
        ajax.loadURL("https://gamma.ck12.org/flx/get/info/artifact/resources/" + artifactID + "/inlineworksheet?format=json", {
            withCredentials: true,
            callback: function(response) {
                console.log(response + "&^*&$%^$^")
                console.log(artifact_Document + " " + artifact_Document.length)
                response = JSON.parse(response)
                if (response.response.resources.length != 0) {
                    var doc_object = {
                        "name": name,
                        "document_id": response.response.resources[0]["boxDocuments"].documentID
                    };
                    artifact_Document.push(doc_object);
                    console.log(artifact_Document + " " + artifact_Document.length)
                    getWorkSheetSession(response.response.resources[0]["boxDocuments"].documentID)

                } else {
                    console.log("Content is Not available")
                }
            }

        })

    }

    function getWorkSheetSession(document_id) {
        console.log(artifact_Document + " " + artifact_Document.length)
            //var testUrl = "https://view-api.box.com/1/sessions/4cac876330214114bf44a8b524938e8e/view?theme=light"
        var baseUrl = "https://view-api.box.com/1/sessions/",
            document_id = document_id,
            theme = "/view?theme=light";
        console.log("doc_object :" + artifact_Document)
        $.ajax({
            type: "GET",
            url: "http://gamma.ck12.org/flx/get/box/viewer/session?document_id=" + document_id,
            success: function(data) {
                data = JSON.parse(data);
                var session_id = data.response.session;
                //console.log(data)
                document.getElementsByClassName('instruction-video-frame')[0].setAttribute('src', baseUrl + session_id + theme);
                var fram_doc = document.getElementsByClassName('instruction-video-frame')[0].contentDocument ||  document.getElementsByClassName('instruction-video-frame')[0].contentWindow.document;
				$('.instruction-video-frame').ready(function(){
					setTimeout(function(){
						document.getElementsByClassName('instruction-video-frame')[0].contentDocument.documentElement.getElementsByClassName("fullscreen-btn")[0].onclick = function(){
							setTimeout(function(){
								document.getElementsByClassName('instruction-video-frame')[0].contentDocument.documentElement.getElementsByClassName("fullscreen-btn")[0].style.display = "inline-block"
							},1000)
						}
		        	},6000);
				});
            },
            error: function(error) {
                alert(error + "=PDF FINDING ERROR")
            }

        })




    }
    /***********************************************WorkSheet intigration******************************************************/
    function openIframe(e) {

        event.stopPropagation();

        if (!checkDeviceConnectivity()) {
            showErrorMessage();
        } else {
            //document.getElementsByClassName('main-container')[0].style.overflow="hidden";
            document.body.classList.add("freez");
            var modalHeight = Math.max((document.getElementsByClassName('main-container')[0].clientHeight + 88), (window.innerHeight - 118));
            document.getElementsByClassName('modal-window')[0].classList.remove('hide');
            document.getElementsByClassName('modal-window')[0].style.height = modalHeight + "px";
            document.getElementsByClassName('iframe-container')[0].style.top = window.scrollY + 250 + "px";
            var refUrl = window.API_SERVER_URL + "/embed/#module=concept&handle=" + e.refValue + "&branch=physics&filters=&nochrome=true/referrer=simulation_tile";
            document.getElementsByClassName('i-frame')[0].setAttribute("src", refUrl);
        };
    };

    function closeIframe() {
        event.stopPropagation();
        //document.body.classList.remove("freez");
        //document.getElementsByTagName("body")[0].style.overflow="auto";
        document.getElementsByClassName('i-frame')[0].setAttribute("src", "");
        document.getElementsByClassName('modal-window')[0].classList.add('hide');
        //document.getElementsByClassName('i-frame')[0].setAttribute("src","");
    }

    function goBackToLauncher() {
        var iFrame = document.getElementsByClassName('i-frame')[0];
        iFrame.setAttribute("src", "");
        iFrame.classList.add('hide');
        document.getElementsByClassName('thumbnail-view-holder')[0].classList.remove('hide');
        document.getElementsByClassName('side-navigation-button')[0].classList.remove('hide');
        document.getElementsByClassName('go-back')[0].classList.add('hide');
        document.getElementsByClassName('search-box')[0].classList.remove('hide');
    }

    var simConceptsName, simConceptsHandle, firstConcept = true;

    function setConceptName(conceptId) {
        var presentConcept = false;
        simConceptsName = "";
        for (var eidsConceptCount = 0; eidsConceptCount < eidsData["concepts"].length; eidsConceptCount++) {
            if (conceptId == eidsData["concepts"][eidsConceptCount].encodedID) {
                simConceptsName = eidsData["concepts"][eidsConceptCount].name;
                simConceptsHandle = eidsData["concepts"][eidsConceptCount].handle;
            }
        }

        for (var arrayLength = 0; arrayLength < conceptsArray.length; arrayLength++) {
            if (conceptsArray[arrayLength] == simConceptsName) {
                presentConcept = true;
            }
        }
        if (firstConcept || !presentConcept) {
            conceptsArray.push(simConceptsName);
            firstConcept = false;
        }
    }

    var group1 = [],
        group2 = [],
        group3 = [],
        group4 = [],
        group5 = [],
        group6 = [],
        newConceptsArray = [{
            name: "Motion and Force",
            data: group1
        }, {
            name: "Momentum, Work, Power, and Energy",
            data: group2
        }, {
            name: "Waves",
            data: group3
        }, {
            name: "Electricity and Magnetism",
            data: group4
        }, {
            name: "Atom",
            data: group5
        }, {
            name: "Introduction to Physics",
            data: group6
        }];

    function arrangeConcepts() {
        for (var eidsConceptCount = 0; eidsConceptCount < eidsData["concepts"].length; eidsConceptCount++) {
            for (var conceptCount = 0; conceptCount < conceptsArray.length; conceptCount++) {
                if (eidsData["concepts"][eidsConceptCount].name == conceptsArray[conceptCount]) {
                    for (var groupCount = 0; groupCount < newConceptsArray.length; groupCount++) {
                        if (eidsData["concepts"][eidsConceptCount].category == newConceptsArray[groupCount]["name"]) {
                            newConceptsArray[groupCount]["data"].push(conceptsArray[conceptCount]);
                        }
                    }
                }
            }
        }
    }

    var simStandardsName, simStandardsHandle, firstStandard = true,
        firstSimStandard = true,
        standardIds = [],
        standardDesc = [],
        simStandardsDesc;

    function setStandardName(standardId) {
        var presentStandard = false,
            presentSimStandard = false;
        simStandardsName = standardId;
        for (var arrayCount = 0; arrayCount < simStandardsName.length; arrayCount++) {
            for (var arrayLength = 0; arrayLength < standardsArray.length; arrayLength++) {
                if (standardsArray[arrayLength]["label"] == stdData.response.standards[simStandardsName[arrayCount]].label) {
                    presentStandard = true;
                }
            }
            if (firstStandard || !presentStandard) {
                standardsArray.push({
                    label: stdData.response.standards[simStandardsName[arrayCount]].label,
                    description: stdData.response.standards[simStandardsName[arrayCount]].description,
                    ancestors: stdData.response.standards[simStandardsName[arrayCount]].ancestors
                });
                firstStandard = false;
            }

            for (var arrayLength = 0; arrayLength < standardIds.length; arrayLength++) {
                if (standardIds[arrayLength] == stdData.response.standards[simStandardsName[arrayCount]].label) {
                    presentSimStandard = true;
                }
            }
            if (firstSimStandard || !presentSimStandard) {
                firstSimStandard = false;
                standardIds.push(stdData.response.standards[simStandardsName[arrayCount]].label);
                standardDesc.push(stdData.response.standards[simStandardsName[arrayCount]].description);
            }
            presentSimStandard = false;
        }
        simStandardsName = standardIds;
        simStandardsDesc = standardDesc;
    }

    var groupS1 = [],
        groupS2 = [],
        groupS3 = [],
        groupS4 = [],
        newStandardsArray = [{
            name: "MS-ESS",
            data: groupS1
        }, {
            name: "MS-PS",
            data: groupS2
        }, {
            name: "HS-ESS",
            data: groupS3
        }, {
            name: "HS-PS",
            data: groupS4
        }];

    function arrangeStandards() {
        for (var standardCount = 0; standardCount < standardsArray.length; standardCount++) {
            for (var groupCount = 0; groupCount < newStandardsArray.length; groupCount++) {
                if (standardsArray[standardCount]["label"].match(newStandardsArray[groupCount]["name"])) {
                    newStandardsArray[groupCount]["data"].push(standardsArray[standardCount]);
                }
                if (!newStandardsArray[groupCount]["description"] && newStandardsArray[groupCount]["data"].length) {
                    newStandardsArray[groupCount]["description"] = newStandardsArray[groupCount]["data"][0]["ancestors"][1]["description"];
                }
            }
        }

        var options2 = {
            parent: standardsNavParent,
            data: newStandardsArray,
            simData: simData,
            search: function(names) {
                showSearchedSimsWithStandards(names);
            },
            setSearched: function(isStandardSelected) {
                setStandardSelection(isStandardSelected);
            }
        };
        window.sidenav2 = new SideNavigation(options2);
        sideNav2 = window.sidenav2;
        var sideNavButton2 = document.getElementsByClassName('sort-box-standard')[0];
        sideNavButton2.addEventListener('click', sideNav2.openSideNavScreen.bind(sideNav2), false);
        sideNavButton2.addEventListener('touchstart', doNothing, false);

        document.addEventListener('click', sideNav2.closeSideNavScreen.bind(sideNav2), false);
        document.addEventListener('touchstart', sideNav2.closeSideNavScreen.bind(sideNav2), false);

        //document.getElementsByClassName('search-icon')[0].addEventListener('click',expandSearch,false);

    }

    function openSim(e) {

        e.preventDefault();
        //if(!window.localStorage.getItem('allspark')) downloadAllspark();
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            if (e.currentTarget.id == simData["simulations"][simCount].name) {
                if (simData["simulations"][simCount].simulationUrl == "") {

                } else {
                    if (simData["simulations"][simCount].simulationUrl.match(/gamma.ck12.org/i)) {
                        var refUrl = simData["simulations"][simCount].simulationUrl;
                        window.open(refUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                    } else {
                        var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
                            simURL = simData["simulations"][simCount].simulationUrl,
                            simName = simURL.split('/')[0];
                        //var refUrl = "http://interactives.ck12.org/simulations/physics/" + simURL, uri = encodeURI(refUrl) + '/js/CoverScene.js';
                        var refUrl = "http://simdev.ck12.org/simulations/physics/" + simName + '.zip',
                            uri = encodeURI(refUrl),
                            fileURLzip = fileURL + simName + '.zip',
                            fileURLfolder = fileURL,
                            fileURLsim = fileURL + simName + '/app/index.html';

                        // To open sim offline
                        if (window.localStorage.getItem(simName)) {
                            //window.open(fileURLsim, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                            var fileUrl = fileURLsim + "?referrer=ck12Launcher&loc=app&backUrl=" + launcherOnlyURL;
                            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                            if (iOS == true) {
                                cordova.InAppBrowser.open(fileUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no,toolbar=no');
                            } else {
                                window.open(fileUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                            }
                            //window.location.href = fileURLsim+"?referrer=ck12Launcher&backUrl=" +launcherOnlyURL;
                        } else if (checkDeviceConnectivity()) {
                            // To open the sim online
                            var fileUrl = "http://simdev.ck12.org/simulations/physics/" + simURL + "?referrer=ck12Launcher&loc=app&backUrl=" + launcherOnlyURL;
                            var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                            if (iOS == true) {
                                //window.open(fileUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                                cordova.InAppBrowser.open(fileUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no,toolbar=no');

                                //  var iframeForSimContainer = document.getElementsByClassName("iframe-parent-sim")[0];
                                //                                                                                                                                      var iframeForSim = document.getElementsByClassName("instruction-video-frame-sim")[0];
                                //                                                                                                                                    iframeForSim.style.width = window.windowWidth+"px";
                                //                                                                                                                                 iframeForSim.style.height = (window.windowHeight-70)+"px";
                                //                                                                                                                                iframeForSimContainer.classList.remove("hide");
                                //                                                                                                                              document.getElementsByClassName('instruction-video-frame-sim')[0].setAttribute("src",fileUrl);
                            } else {
                                window.open(fileUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                            };
                            //window.location.href = "http://simtest.ck12.org/simulations/repository/"+simData["simulations"][simCount].simulationUrl+"?referrer=ck12Launcher&backUrl="+window.location.href+"&artifactID=1234";
                            if (simData["simulations"][simCount].simulationUrl.match(/gamma.ck12.org/i)) {
                                window.location.href = simData["simulations"][simCount].simulationUrl;
                            }
                            break;
                        } else {
                            showErrorMessage();
                        };
                    }
                    break;
                }
            }
        }
    }

    function downloadAllspark() {
        var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
            refUrl = "http://simdev.ck12.org/simulations/common/allspark/1.0.8.zip",
            uri = encodeURI(refUrl),
            fileURLzip = fileURL + '1.0.8.zip',
            fileURLfolder = fileURL;

        var fileTransfer = new FileTransfer();
        fileTransfer.download(uri, fileURLzip, function(entry) {
                console.log("download complete: " + entry.toURL());
                zip.unzip(fileURLzip, fileURLfolder, function(res) {
                    zip.unzip(fileURL + '/1.0.8/assets.zip', fileURLfolder + '/allspark', function(res) {
                        console.log("download complete-1");
                        zip.unzip(fileURL + '/1.0.8/css.zip', fileURLfolder + '/allspark', function(res) {
                            console.log("download complete-2");
                            zip.unzip(fileURL + '/1.0.8/js.zip', fileURLfolder + '/allspark', function(res) {
                                console.log("download complete-3");
                                zip.unzip(fileURL + '/1.0.8/json.zip', fileURLfolder + '/allspark', function(res) {
                                    console.log("download complete-4");
                                    zip.unzip(fileURL + '/1.0.8/lib.zip', fileURLfolder + '/allspark', function(res) {
                                        zip.unzip(fileURLfolder + '/allspark/lib/fonts.zip', fileURLfolder + '/allspark/lib', function(res) {
                                            console.log("download complete-5");
                                            zip.unzip(fileURLfolder + '/allspark/lib/jquery.zip', fileURLfolder + '/allspark/lib', function(res) {
                                                console.log("download complete-6");
                                                zip.unzip(fileURLfolder + '/allspark/lib/require.zip', fileURLfolder + '/allspark/lib', function(res) {
                                                    console.log("download complete-7");
                                                    zip.unzip(fileURLfolder + '/allspark/lib/tinymce.zip', fileURLfolder + '/allspark/lib', function(res) {
                                                        console.log("download complete-8");
                                                        /** PLEASE COPY THIS TO IOS***/
                                                        document.getElementById("loadingOverlay").classList.add("hide");
                                                        window.localStorage.setItem('allspark', 'true');
                                                        /** PLEASE COPY THIS TO IOS***/
                                                        //document.getElementsByClassName("tile-download")[0].classList.add("hide");
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                    //window.localStorage.setItem('allspark','true');
                });

            },
            function(error) {
                console.log("download error source " + error.source);
                console.log("download error target " + error.target);
                console.log("upload error code" + error.code);
            },
            false, {
                headers: {
                    "Authorization": "Basic dGVzdHVzZXJuYW1lOnRlc3RwYXNzd29yZA=="
                }
            }
        );
    }

    function downloadSim(e) {
        e.stopPropagation();
        if (checkDeviceConnectivity()) {
            document.getElementById("loadingOverlay").classList.remove("hide");
            if (!window.localStorage.getItem('allspark')) downloadAllspark();

            /*if(!window.localStorage.getItem('allspark'))
             {	for(var temp=1;temp<2;temp--)
             {	if(window.localStorage.getItem('allspark'))
             break;
             }
             }*/
            for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
                var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
                    simURL = simData["simulations"][simCount].simulationUrl,
                    simName = simURL.split('/')[0];
                //var refUrl = "http://interactives.ck12.org/simulations/physics/" + simURL, uri = encodeURI(refUrl) + '/js/CoverScene.js';
                var refUrl = "http://simdev.ck12.org/simulations/physics/" + simName + '.zip',
                    uri = encodeURI(refUrl),
                    fileURLzip = fileURL + simName + '.zip',
                    fileURLfolder = fileURL,
                    fileURLsim = fileURL + simName + '/app/index.html';

                if (e.target.parentElement.id == simData["simulations"][simCount].name) {

                    /*else{*/
                    if (window.localStorage.getItem(simName)) {
                        console.log("already there");
                        document.getElementById("loadingOverlay").classList.add("hide");
                        /*		var refUrl = simData["simulations"][simCount].simulationUrl;
                         window.open(refUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');*/
                    } else {

                        function downloadFile() {
                            var fileTransfer = new FileTransfer();
                            fileTransfer.download(uri, fileURLzip, function(entry) {
                                    console.log("download complete: " + entry.toURL());

                                    zip.unzip(fileURLzip, fileURLfolder, function(res) {
                                        zip.unzip(fileURL + simName + '/app.zip', fileURLfolder + simName, function(res) {
                                            zip.unzip(fileURL + simName + '/app/css.zip', fileURLfolder + simName + '/app', function(res) {
                                                console.log("download complete-a");
                                                zip.unzip(fileURL + simName + '/app/js.zip', fileURLfolder + simName + '/app', function(res) {
                                                    console.log("download complete-b");
                                                    zip.unzip(fileURL + simName + '/app/json.zip', fileURLfolder + simName + '/app', function(res) {
                                                        console.log("download complete-c");
                                                        zip.unzip(fileURL + simName + '/app/assets.zip', fileURLfolder + simName + '/app', function(res) {
                                                            window.localStorage.setItem(simName, 'true');
                                                            console.log("download complete-d")
                                                                /** PLEASE COPY THIS TO IOS***/
                                                            if (window.localStorage.getItem("allspark")) {
                                                                document.getElementById("loadingOverlay").classList.add("hide");

                                                            }
                                                            /** PLEASE COPY THIS TO IOS***/
                                                            e.target.classList.add("downloaded");
                                                            downloadedSims.push(simName);
                                                            checkAnysimDownloaded();
                                                            zip.unzip(fileURL + simName + '/res.zip', fileURLfolder + simName, function(res) {
                                                                console.log("download complete-e");
                                                            });
                                                            //window.open(fileURLsim, '_blank', 'location=no,zoom=no,enableViewportScale=no');
                                                            //window.location.href = fileURLsim;
                                                        });
                                                    });
                                                });
                                            });



                                        });

                                    });

                                },
                                function(error) {
                                    console.log("download error source " + error.source);
                                    console.log("download error target " + error.target);
                                    console.log("upload error code" + error.code);
                                    var refUrl = "http://simdev.ck12.org/simulations/physics/" + simURL;
                                    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
                                    document.getElementById("loadingOverlay").classList.add("hide");
                                    /*	if(iOS==true){
                                     window.location.href = refUrl;
                                     }else{
                                     window.open(refUrl, '_blank', 'location=no,zoom=no,enableViewportScale=no');	
                                     };*/

                                },
                                false, {
                                    headers: {
                                        "Authorization": "Basic dGVzdHVzZXJuYW1lOnRlc3RwYXNzd29yZA=="
                                    }
                                }
                            );
                        }
                        downloadFile();


                    }
                    /*}*/
                    break;
                }
            }


        } else {
            showErrorMessage();
        }
    }

    /*Code for delete */
    function ClearDirectory(path) {
        var path = path.toString();
        window.localStorage.removeItem(path);
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 1024 * 1024, onFileSystemSuccess, fail);

        function fail(evt) {
            alert("FILE SYSTEM FAILURE");
        }

        function onFileSystemSuccess(fileSystem) {
            fileSystem.root.getDirectory(
                "../../Library/NoCloud/" + path, {
                    create: true,
                    exclusive: false
                },
                function(entry) {
                    entry.removeRecursively(function() {
                        console.log("Remove Recursively Succeeded");
                    }, fail);
                }, fail);
        }
    }

    function cleanZipfile(path) {
        var path = path.toString();
        window.requestFileSystem(LocalFileSystem.PERSISTENT, 1024 * 1024, onFileSystemSuccess, fail);

        function fail(evt) {
            alert("FILE SYSTEM FAILURE");
        }

        function onFileSystemSuccess(fileSystem) {
            fileSystem.root.getFile(
                "../../Library/NoCloud/" + path + ".zip", {
                    create: true,
                    exclusive: false
                },
                function(entry) {
                    entry.remove(function() {
                        window.localStorage.removeItem(path);
                        console.log("Vipin Bhai Chaa Gaye");


                    }, fail);
                }, fail);
        }
    }


    function checkAnysimDownloaded() {
        anySimDownloaded = false;
        var offlineTab = document.getElementById('offlineTab'); /**Code for delete **/ ;
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var cardDownload = document.getElementsByClassName('tile-download')[simCount];
            var simURL = simData["simulations"][simCount].simulationUrl,
                simName = simURL.split('/')[0];
            if (cardDownload.classList.contains("downloaded") || window.localStorage.getItem(simName)) {
                anySimDownloaded = true;
            }
        }
        if (anySimDownloaded) {
            //			  if(offlineTab.classList.contains('hideOffline'))offlineTab.classList.remove('opacityNone');
            if (document.getElementsByClassName('toggle-button-container')[0].classList.contains('hideOffline')) document.getElementsByClassName('toggle-button-container')[0].classList.remove('hideOffline');
        } else {
            if (offlineTab.classList.contains('toggle-button-selected')) {
                offlineTab.classList.remove('toggle-button-selected');
                //offlineTab.classList.add('inactive');
                downloadedMode = false;
            }
            ClearDirectory("1.0.8");
            ClearDirectory("allspark");
            cleanZipfile("1.0.8");
            window.localStorage.removeItem('allspark');
            document.getElementsByClassName('toggle-button-container')[0].classList.add('hideOffline');
            showAll();
        }
    }

    function deleteSim(e) {
        e.stopPropagation();

        var sssurl = e.target.parentElement.id.toLowerCase() + "/app/index.html";
        var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
            simURL = e.target.parentElement.id.toLowerCase() + "/app/index.html",
            simName = simURL.split('/')[0];
        //var refUrl = "http://interactives.ck12.org/simulations/physics/" + simURL, uri = encodeURI(refUrl) + '/js/CoverScene.js';
        var refUrl = "http://simdev.ck12.org/simulations/physics/" + simName + '.zip',
            uri = encodeURI(refUrl),
            fileURLzip = fileURL + simName + '.zip',
            fileURLfolder = fileURL,
            fileURLsim = fileURL + simName + '/app/index.html';
        //e.stopPropagation();

        //document.getElementById("loadingOverlay").classList.remove("hide");
        //if(!window.localStorage.getItem('allspark')) downloadAllspark();


        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var fileURL = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream ? cordova.file.dataDirectory : cordova.file.externalDataDirectory,
                simURL = simData["simulations"][simCount].simulationUrl,
                simName = simURL.split('/')[0];
            //var refUrl = "http://interactives.ck12.org/simulations/physics/" + simURL, uri = encodeURI(refUrl) + '/js/CoverScene.js';
            var refUrl = "http://simdev.ck12.org/simulations/physics/" + simName + '.zip',
                uri = encodeURI(refUrl),
                fileURLzip = fileURL + simName,
                fileURLfolder = fileURL,
                fileURLsim = fileURL + simName + '/app/index.html';

            if (e.target.parentElement.id == simData["simulations"][simCount].name) {
                /*** code to delete Downloaded sim from view***/
                var simNameCheck = e.target.parentElement.id;
                ClearDirectory(simName);
                cleanZipfile(simName);

                e.target.previousSibling.classList.remove("downloaded");
                var index = downloadedSims.indexOf(simName);
                if (index > -1) {
                    downloadedSims.splice(index, 1);
                }

                hideDeletedSim(simNameCheck);
                checkAnysimDownloaded();
            }
        }




    }
    /*Code for delete */

    var item, searchTerm;

    function searchItem(e) {
        prevItem = "", nameOfConcepts = [], nameOfStandards = [];
        hideAll();

        notFound = true;

        sideNav.unselectAllCheckBox();
        if (sideNav2) sideNav2.unselectAllCheckBox();

        searchInSimulations();
        searchInConcepts();
        searchInKeywords();


        item = searchClick.value.toLowerCase();
        if (prevItem === item) {} else {
            if (e.keyCode < 91 && e.keyCode > 47) {
                setTimeout(function() {
                    if (prevItem === item) {} else {
                        /*dexterjs.logEvent("FBS_SIMULATION_SEARCH", {
	     	        			searchTerm : item
	     	                });*/
                    }
                    prevItem = item;
                }, 1000);
            }
        }
        if (notFound) {
            document.getElementsByClassName('no-match-found')[0].classList.remove('hide');
        }
        if (searchClick.value == '') {
            document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
        } else if (window.innerWidth > 900) {
            document.getElementsByClassName('clear-item')[0].classList.remove('hide-back');
        }
    }

    var lastScrollValue = 0;

    function scrollSims(e) {
        e.preventDefault();
        e.stopPropagation();
        var sortSection = document.getElementsByClassName('filter-button')[0];

        /*if(window.scrollY > lastScrollValue && window.scrollY > 71){
        	document.getElementsByClassName('filter-button')[0].classList.add('hide');
        	document.getElementsByClassName('filter-button')[1].classList.add('hide');
        }
        else{
        	document.getElementsByClassName('filter-button')[0].remove('hide');
        	document.getElementsByClassName('filter-button')[1].remove('hide');
        }*/

        lastScrollValue = window.scrollY;
    }

    var notFound = true;

    function searchInSimulations() {
        var item = searchClick.value.toLowerCase();
        item = item.trim();
        var itemReg = new RegExp(item, "i");
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var string = simData["simulations"][simCount].name.toLowerCase();
            var result = string.match(itemReg);
            //			if(result && result.input == simData["simulations"][simCount].name.toLowerCase()){
            //				showSearched(simCount);
            //				notFound=false;
            //			}
            if (result && result.input == simData["simulations"][simCount].name.toLowerCase()) { // updated for search in offline mode
                if (downloadedMode) {
                    searchInDownloaded(simCount);
                } else {
                    showSearched(simCount);
                    notFound = false;
                }
            }
        }
    }

    function searchInConcepts() {
        document.getElementsByClassName('no-match-found')[0].classList.add('hide');
        var item = searchClick.value.toLowerCase();
        item = item.trim();
        var itemReg = new RegExp(item, "i");
        for (var eidsConceptCount = 0; eidsConceptCount < eidsData["concepts"].length; eidsConceptCount++) {
            var string = eidsData["concepts"][eidsConceptCount].name.toLowerCase();
            var result = string.match(itemReg);
            if (result && result.input == eidsData["concepts"][eidsConceptCount].name.toLowerCase()) {
                for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
                    for (var simConceptCount = 0; simConceptCount < simData["simulations"][simCount].concepts.length; simConceptCount++) {
                        if (eidsData["concepts"][eidsConceptCount].encodedID == simData["simulations"][simCount].concepts[simConceptCount]) {
                            if (downloadedMode) { // updated for search in offline mode
                                searchInDownloaded(simCount);
                            } else {
                                showSearched(simCount);
                                notFound = false;
                            }
                            //							showSearched(simCount);
                            //							notFound=false;
                        }

                    }
                }
            }
        }
        //		if(notFound){
        //			document.getElementsByClassName('no-match-found')[0].classList.remove('hide');
        //		}
    }

    function searchInKeywords() {

        var item = searchClick.value.toLowerCase();
        item = item.trim();
        var itemReg = new RegExp(item, "i");

        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            for (var simKeywordCount = 0; simKeywordCount < simData["simulations"][simCount].keywords.length; simKeywordCount++) {
                var string = simData["simulations"][simCount].keywords[simKeywordCount].toLowerCase();
                var result = string.match(itemReg);
                if (result && result.input == simData["simulations"][simCount].keywords[simKeywordCount].toLowerCase()) {
                    if (downloadedMode) { // updated for search in offline mode
                        searchInDownloaded(simCount);
                    } else {
                        showSearched(simCount);
                        notFound = false;
                    }
                    //					showSearched(simCount);
                    //					notFound=false;
                }
            }
        }
        //        if (notFound) {
        //            document.getElementsByClassName('no-match-found')[0].classList.remove('hide');
        //        }
    }

    function searchInDownloaded(simCount) {
        for (var i in downloadedSims) {
            if (simData["simulations"][simCount].name.toLowerCase().replace(/ /g, '-').replace(/'/g, "") === downloadedSims[i]) {
                showSearched(simCount);
                notFound = false;
            }
        }
    }

    var simSelected = false,
        isConceptSelected = false,
        isStandardSelected = false;

    function setConceptSelection(isSelected) {
        isConceptSelected = isSelected;
        simSelected = isConceptSelected || isStandardSelected;
        if (!simSelected) {

            if (downloadedMode) {
                //document.getElementById('offlineTab').classList.add('toggle-button-selected');
                document.getElementById('offlineTab').classList.remove('toggle-button-selected');
                downloadedMode = false;
                //				showOfflineSims();
            } else {
                showAll();
                nameOfConcepts = [];
                document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
            }

            //			showAll();
            //			nameOfConcepts=[];
            //			document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
        } else if (window.innerWidth > 900) {
            document.getElementsByClassName('clear-item')[0].classList.remove('hide-back');
        }
        document.getElementsByClassName('no-match-found')[0].classList.add('hide');
    }

    function setStandardSelection(isSelected) {
        isStandardSelected = isSelected;
        simSelected = isConceptSelected || isStandardSelected;
        if (!simSelected) {
            if (downloadedMode) {
                //document.getElementById('offlineTab').classList.add('toggle-button-selected');
                document.getElementById('offlineTab').classList.remove('toggle-button-selected');
                downloadedMode = false;
                //				showOfflineSims();
                showAll();
            } else {
                showAll();
                nameOfStandards = [];
                document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
            }
            //			showAll();
            //			nameOfStandards=[];
            //			document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
        } else if (window.innerWidth > 900) {
            document.getElementsByClassName('clear-item')[0].classList.remove('hide-back');
        }
        document.getElementsByClassName('no-match-found')[0].classList.add('hide');
    }

    function showSearchedSimsWithConcepts(names) {
        nameOfConcepts = names;
        if (nameOfConcepts.length == 0 && nameOfStandards.length == 0) {
            showAll();
        } else {
            hideAll();
            searchSimsWithConcepts(nameOfConcepts);
        }
        searchClick.value = "";
        searchSimsWithStandards(nameOfStandards);
    }

    function showSearchedSimsWithStandards(names) {
        nameOfStandards = names;
        if (nameOfStandards.length == 0 && nameOfConcepts.length == 0) {
            showAll();
        } else {
            hideAll();
            searchSimsWithStandards(nameOfStandards);
        }
        searchClick.value = "";
        searchSimsWithConcepts(nameOfConcepts);
    }

    function searchSimsWithConcepts(names) {
        for (var i = 0; i < names.length; i++) {
            for (var eidsConceptCount = 0; eidsConceptCount < eidsData["concepts"].length; eidsConceptCount++) {
                var conceptName = eidsData["concepts"][eidsConceptCount].name.toLowerCase();
                if (conceptName == names[i]) {
                    for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
                        for (var simConceptCount = 0; simConceptCount < simData["simulations"][simCount].concepts.length; simConceptCount++) {
                            if (eidsData["concepts"][eidsConceptCount].encodedID == simData["simulations"][simCount].concepts[simConceptCount]) {
                                showSearched(simCount, true);
                            }
                        }
                    }
                }
            }
        }
        if (downloadedMode) {
            setTimeout(function() {
                var notFoundF = true;
                for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
                    if (!document.getElementsByClassName('thumbnail-view')[simCount].classList.contains('hide-back')) {
                        document.getElementsByClassName('no-match-found')[0].classList.add('hide');
                        notFoundF = false;
                        break;
                    } else {
                        notFoundF = true;
                    }
                }
                if (notFoundF) document.getElementsByClassName('no-match-found')[0].classList.remove('hide');
            }, 500);
        }
    }

    function searchSimsWithStandards(names) {
        var conceptNames = [],
            stdId;
        for (var standardCount = 0; standardCount < names.length; standardCount++) {
            for (var key in stdData.response.standards) {
                var standardId = stdData.response.standards[key].label.toLowerCase();
                if (standardId == names[standardCount].toLowerCase()) {
                    stdId = stdData.response.standards[key].sid.toLowerCase();
                }
            }

            for (var key in stdData.response.concepts) {
                var standardId = stdData.response.concepts[key].standards;

                for (var i = 0; i < standardId.length; i++) {
                    if (standardId[i].toLowerCase() == stdId) {
                        var conceptName = stdData.response.concepts[key].concept.name.toLowerCase();
                        conceptNames.push(conceptName);
                    }
                }
            }
        }
        searchSimsWithConcepts(conceptNames);
    }

    /*function searchSimsWithStandards(names){
		var conceptNames = [];
		for(var standardCount=0; standardCount<names.length; standardCount++){
			for(var key in stdData.response.concepts) {
				var standardId = stdData.response.concepts[key].standards;
				
				for(var i=0; i<standardId.length; i++){
		    		if(standardId[i].toLowerCase() == names[standardCount].toLowerCase()){
		    			var conceptName = stdData.response.concepts[key].concept.name.toLowerCase();
		    			conceptNames.push(conceptName);
					}
				}
			}
    	}
		searchSimsWithConcepts(conceptNames);
	}*/

    function hideAll() {
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var card = document.getElementsByClassName('thumbnail-view')[simCount];
            card.classList.add('hide-back');
        }
    }
    /*** code to delete Downloaded sim from view***/
    function hideDeletedSim(simName) {
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            if (simName == simData["simulations"][simCount].name) {
                var card = document.getElementsByClassName('thumbnail-view')[simCount];
                card.classList.add('hide-back');
            }
        }
    }
    /*** code to delete Downloaded sim from view***/

    /**Code for delete **/
    function showAll() {
        for (var simCount = 0; simCount < simData["simulations"].length; simCount++) {
            var card = document.getElementsByClassName('thumbnail-view')[simCount],
                cardDelete = document.getElementsByClassName('tile-delete')[simCount],
                cardDownload = document.getElementsByClassName('tile-download')[simCount];
            card.classList.remove('hide-back');
            cardDelete.classList.add('hide');
            cardDownload.classList.remove('hide');
        }
    }
    /**Code for delete **/
    function showSearched(simCount, searchWithConceptF) {
        if (searchWithConceptF) { // updated for concept search in offline mode
            if (downloadedMode) {
                for (var i in downloadedSims) {
                    if (simData["simulations"][simCount].name.toLowerCase().replace(/ /g, '-').replace(/'/g, "") === downloadedSims[i]) {
                        var card = document.getElementsByClassName('thumbnail-view')[simCount];
                        card.classList.remove('hide-back');

                    } else {}
                }
            } else {
                var card = document.getElementsByClassName('thumbnail-view')[simCount];
                card.classList.remove('hide-back');
            }
        } else {
            var card = document.getElementsByClassName('thumbnail-view')[simCount];
            card.classList.remove('hide-back');
        }

        //		var card = document.getElementsByClassName('thumbnail-view')[simCount];
        //		card.classList.remove('hide-back');
    }

    function expandSearch(e) {
        e.stopPropagation();
        //searchClick.classList.add('search-expand');
        document.getElementsByClassName('search-field')[0].classList.add('open-search');
        document.getElementsByClassName('search-icon')[0].classList.add('hide');
        //searchClick.click();
        setTimeout(function() {
            searchClick.focus();
        }, 500);
    }

    function collapseSearch(e) {
        e.stopPropagation();
        document.body.classList.remove("freez");
        //document.getElementsByClassName('main-container')[0].overflow=‘scroll’;
        if (lastSimStdShowed) {
            lastSimStdShowed.classList.add('hide');
            lastSimStd.style.fontWeight = 'normal';

        }
        if (!document.getElementsByClassName("filter-main-wrapper")[0].classList.contains("go-left") && !e.target.classList.contains("nav-bottom") && !e.target.classList.contains("filter-menu-wrapper")) {
            setTimeout(function() {
                document.getElementsByClassName("filter-main-wrapper")[0].classList.add("go-left");
            }, 500);

        }


        //		if(document.getElementById("UserProfileView").classList.contains("hide")){
        if (!(e.target.classList.contains("signout") || e.target.classList.contains('user-profile-screen') || e.target.classList.contains('user-profile-container') || e.target.classList.contains('email') || e.target.classList.contains('name') || e.target.title == "Vipin Sharma"))
            document.querySelector("#UserProfileView").classList.add('hide')
            //		 }
    }

    /*document.ontouchmove = function(e){
    	e.preventDefault();
    }*/

});;
define('SideNavigation', ['ajax'], function(ajax) {

    /**
     * @method createSideNav
     * @param {string} side for creation (left or right)
     * @param {number} number if items in nav
     */

    var conceptsEidArray, standardsIdArray = [],
        standardsIdObject;

    ajax.loadURL('json/eids.json', {
        "callback": createConceptList

    });
    ajax.loadURL('json/standardsData.json', {
        "callback": generateStandardsList
    });

    function createConceptList(responseText) {

        conceptResponse = JSON.parse(responseText);
        conceptsEidArray = conceptResponse.concepts;
    }

    function generateStandardsList(responseText) {

        standardsResponse = JSON.parse(responseText);
        standardsIdObject = standardsResponse.response.standards;
        for (var key in standardsIdObject) {
            standardsIdArray.push(key);
        }
    }


    function SideNavigation(options) {
        this.sideNavScreen;
        this.isNav = false;
        this.isChecked = false;
        this.parent = options.parent;
        this.data = options.data;
        this.simData = options.simData;
        this.sortedData = [];
        this.search = options.search;
        this.setSearched = options.setSearched;
        this.newNames = [];
        this.oldNames = [];
        this.groupBox = [];

        this.dataEidArray = this.data;
        this.dataGroup = false;

        this.sideNavScreen = document.createElement("div");
        this.sideNavScreen.classList.add('side-nav-screen');
        //    	this.sideNavScreen.classList.add('go-left');
        this.parent.appendChild(this.sideNavScreen);

        this.sideNavScreen.addEventListener('click', this.doNothing, false);
        this.sideNavScreen.addEventListener('touchstart', this.doNothing, false);



        this.sortDataElements();
        this.createDataElements();

    };

    SideNavigation.prototype.sortDataElements = function() {
        this.sortedData = this.data;
        //this.sortedData.sort();
    }

    SideNavigation.prototype.createDataElements = function() {
        var sideNavHeading = document.createElement("div");
        sideNavHeading.classList.add('side-nav-heading');
        this.sideNavScreen.appendChild(sideNavHeading);

        this.navBottom = document.getElementsByClassName("nav-bottom")[0];

        /*document.getElementsByClassName("filter-main-wrapper")[0].appendChild(this.navBottom);*/
        /*this.navBottom.innerHTML = "Clear Filter";*/

        /*this.navBottom.addEventListener('touch',this.deselectAll.bind(this),false);*/
        /*this.navBottom.classList.add('deselect');*/
        /*.addEventListener('click',this.deselectAll,false);*/
        var sideNavContent = document.createElement("div");
        sideNavContent.classList.add('side-nav-content');
        this.sideNavScreen.appendChild(sideNavContent);
        //sideNavContent.style.height = (window.innerHeight-220)+'px';

        for (var groupCount = 0; groupCount < this.data.length; groupCount++) {
            if (this.data[groupCount]["data"].length) {
                this.groupBox.push(this.groupBox + groupCount);
                this.groupBox[groupCount] = document.createElement("div");
                this.groupBox[groupCount].classList.add('group-box');
                this.groupBox[groupCount].classList.add('group-box' + groupCount);
                sideNavContent.appendChild(this.groupBox[groupCount]);

                var groupCheckBox = document.createElement("div");
                groupCheckBox.classList.add('ckeck-box');
                this.groupBox[groupCount].appendChild(groupCheckBox);
                groupCheckBox.isChecked = false;

                var groupName = document.createElement("div");
                groupName.classList.add('group-name');
                this.groupBox[groupCount].appendChild(groupName);
                groupName.innerHTML = this.data[groupCount]["description"] || this.data[groupCount]["name"];

                groupName.addEventListener('click', this.groupNameFn.bind(this), false);
                groupCheckBox.addEventListener('click', this.groupCheckBoxFn.bind(this), false);

                var groupContent = document.createElement("div");
                groupContent.classList.add('group-content');
                groupContent.classList.add('group-content' + groupCount);
                this.groupBox[groupCount].appendChild(groupContent);

                var groupElements = "";
                for (var conceptCount = 0; conceptCount < this.data[groupCount]["data"].length; conceptCount++) {
                    if (this.data[groupCount]["data"][conceptCount]["label"]) {
                        groupElements = groupElements + '<div class="concept-box concept-box' + groupCount + '-' + conceptCount + '"><div class="ckeck-box"></div><div class="concept-name" data="' + this.data[groupCount]["data"][conceptCount]["label"] + '">' + this.data[groupCount]["data"][conceptCount]["label"] + '</div></div>'
                    } else {
                        groupElements = groupElements + '<div class="concept-box concept-box' + groupCount + '-' + conceptCount + '"><div class="ckeck-box"></div><div class="concept-name" data="' + this.data[groupCount]["data"][conceptCount] + '">' + this.data[groupCount]["data"][conceptCount] + '</div></div>'
                    }
                }
                groupContent.innerHTML = groupElements;
                var elements = groupContent.getElementsByClassName('concept-box');
                for (var i = 0; i < elements.length; i++) {
                    elements[i].addEventListener('click', this.conceptBoxFn.bind(this), false);
                    elements[i].isChecked = false;
                }
                groupName.click();
            }
        }
        //this.parent.previousElementSibling.click();
    };

    SideNavigation.prototype.groupNameFn = function(e) {
        e.stopPropagation();
        if (e.currentTarget.isView) {
            e.currentTarget.isView = false;
            e.currentTarget.nextSibling.classList.remove('group-collapse');
            e.currentTarget.nextSibling.classList.remove('group-hide');
        } else {
            e.currentTarget.isView = true;
            e.currentTarget.nextSibling.classList.add('group-collapse');
            e.currentTarget.nextSibling.classList.add('group-hide');
        }

    }

    SideNavigation.prototype.groupCheckBoxFn = function(e) {
        var filter_Eid, filterID;
        e.stopPropagation();
        if (e.currentTarget.nextSibling.isView) {
            e.currentTarget.nextSibling.click();
        }

        /*for(var i = 0 ; i < this.dataEidArray.length ; i++){
            	if(this.dataEidArray[i].name == e.currentTarget.parentElement.childNodes[1].innerText){
            		 filter_Eid = this.dataEidArray[i].encodedID ;
            	}
            
        }*/
        var listName = getNthParentOf(e.target, 4);
        if (listName.className == "sort-item concept-filter-list") {

            for (var i = 0; i < conceptsEidArray.length; i++) {
                if (conceptsEidArray[i].name == e.currentTarget.parentElement.childNodes[1].innerText) {
                    filter_Eid = conceptsEidArray[i].encodedID;
                }
            }

            filterID = "context_eid";

        } else if (listName.className == "sort-item standards-filter-list") {
            for (var i = 0; i < standardsIdArray.length; i++) {

                if (standardsIdObject[standardsIdArray[i]].label == e.target.nextElementSibling.innerHTML) {
                    filter_Eid = standardsIdObject[standardsIdArray[i]].sid;
                }

            }
            filterID = "sid";
        }

        if (e.currentTarget.isChecked) {
            this.dataGroup = false;
            e.currentTarget.isChecked = false;
            e.currentTarget.classList.remove('checked');

            for (var conceptCount = 0; conceptCount < e.currentTarget.nextSibling.nextSibling.childNodes.length; conceptCount++) {
                var conceptBox = e.currentTarget.nextSibling.nextSibling.childNodes[conceptCount];
                conceptBox.childNodes[0].classList.add('checked');
                conceptBox.isChecked = true;
                conceptBox.childNodes[0].isChecked = true;
                conceptBox.click();
            }
        } else {
            this.dataGroup = true;
            e.currentTarget.isChecked = true;
            e.currentTarget.classList.add('checked');

            for (var conceptCount = 0; conceptCount < e.currentTarget.nextSibling.nextSibling.childNodes.length; conceptCount++) {
                var conceptBox = e.currentTarget.nextSibling.nextSibling.childNodes[conceptCount];
                conceptBox.childNodes[0].classList.remove('checked');
                conceptBox.isChecked = false;
                conceptBox.childNodes[0].isChecked = false;
                conceptBox.click();
            }

            if (filterID == "context_eid") {
                /*dexterjs.logEvent("FBS_SIMULATION_FILTER", {
                    context_eid : filter_Eid
                });*/
            }

            //_dexterEventCheckBox(filter_Eid);
            //_dexterEventCheckBox.apply(this,[filter_Eid]);
        }

    }

    SideNavigation.prototype.openSideNavScreen = function(e) {
        e.stopPropagation();
        var isFilter;
        var obj1 = e.currentTarget; //.parentNode.parentNode.parentNode.childNodes[1].childNodes[1].childNodes[1];
        var obj2 = e.currentTarget; //.parentNode.parentNode.parentNode.childNodes[3].childNodes[1].childNodes[1];

        if (obj1 != e.currentTarget && obj1.isNav) {
            document.getElementsByClassName('show-menu')[0].click();
            obj1.isNav = false;
        } else if (obj2 != e.currentTarget && obj2.isNav) {
            document.getElementsByClassName('show-menu')[1].click();
            obj2.isNav = false;
        }

        //    	document.getElementsByClassName('sort-item')[0].style.backgroundColor = "#eee";
        //		document.getElementsByClassName('sort-item')[1].style.backgroundColor = "#eee";
        //		document.getElementsByClassName('sort-item')[0].style.boxShadow = "";
        //		document.getElementsByClassName('sort-item')[1].style.boxShadow = "";

        /*if(e.currentTarget.isNav){
    		this.sideNavScreen.classList.add('go-left');
    		e.currentTarget.isNav = false;
    		e.currentTarget.childNodes[3].classList.remove('rotate-show');
    	}
    	else{
    		this.sideNavScreen.classList.remove('go-left');
    		e.currentTarget.isNav = true;
    		e.currentTarget.childNodes[3].classList.add('rotate-show');

    		e.currentTarget.parentNode.parentNode.style.backgroundColor = "white";
    		e.currentTarget.parentNode.parentNode.style.boxShadow = "2px 0px 2px rgba(0, 0, 0, 0.2)";
    		
    		if(e.target.innerHTML.indexOf('Standards') > -1){
    			isFilter = "standards" ;
    		}else if(e.target.innerHTML.indexOf('Concepts') > -1){
    			isFilter = "concept" ;
        	}
    		
    		/*dexterjs.logEvent("FBS_SIMULATION_BROWSE_FILTER", {
    			
    			filterType : isFilter
              
            });
    	}*/
    };

    SideNavigation.prototype.closeSideNavScreen = function(e) {
        e.stopPropagation();

        var obj1 = document.getElementsByClassName('show-menu')[0].parentNode;
        var obj2 = document.getElementsByClassName('show-menu')[1].parentNode;

        if (obj1.isNav) {
            obj1.click();
            obj1.isNav = false;
            obj1.childNodes[3].classList.remove('rotate-show');
        } else if (obj2.isNav) {
            obj2.click();
            obj2.isNav = false;
            obj2.childNodes[3].classList.remove('rotate-show');
        }
    };

    SideNavigation.prototype.doNothing = function(e) {
        e.stopPropagation();
        document.querySelector("#UserProfileView").classList.add('hide')
    };

    SideNavigation.prototype.deselectAll = function(e) {
        e.stopPropagation();
        e.preventDefault();
        this.unselectAllCheckBox();
        //this.showAll();
        //document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
        this.setSearched(false);
        this.search(this.newNames);
    };

    SideNavigation.prototype.showAll = function(e) {
        for (var simCount = 0; simCount < this.simData["simulations"].length; simCount++) {
            var card = document.getElementsByClassName('thumbnail-view')[simCount];
            card.classList.remove('hide-back');
        }
    }

    SideNavigation.prototype.unselectAllCheckBox = function(e) {
        for (var groupCount = 0; groupCount < this.data.length; groupCount++) {
            this.groupBox[groupCount].childNodes[0].classList.remove('checked');
            this.groupBox[groupCount].childNodes[0].isChecked = false;

            for (var conceptCount = 0; conceptCount < this.data[groupCount]["data"].length; conceptCount++) {
                var conceptBox = this.groupBox[groupCount].childNodes[2].childNodes[conceptCount];
                conceptBox.childNodes[0].classList.remove('checked');
                conceptBox.isChecked = false;
                conceptBox.childNodes[0].isChecked = false;
            }
        }
        //        this.setSearched(false);
        this.newNames = [];
        var filterContHeight = window.innerHeight - 140;
        //		if(document.getElementsByClassName("filter-container")[0].style.height != filterContHeight +"px")
        document.getElementsByClassName("filter-container")[0].style.height = filterContHeight + "px";
        document.getElementsByClassName("nav-bottom")[0].classList.remove('deselect');
    };

    SideNavigation.prototype.selectCheckBox = function(boxes) {
        var filterContHeight = window.innerHeight - 140 - 45;
        //		if(document.getElementsByClassName("filter-container")[0].style.height != filterContHeight +"px")
        document.getElementsByClassName("filter-container")[0].style.height = filterContHeight + "px";
        for (var count = 0; count < boxes.length; count++) {
            for (var groupCount = 0; groupCount < this.data.length; groupCount++) {
                if (this.data[groupCount].length > 1) {
                    for (var conceptCount = 1; conceptCount < this.data[groupCount].length; conceptCount++) {
                        var conceptBox = this.groupBox[groupCount].childNodes[2].childNodes[conceptCount - 1];
                        if (boxes[count] == conceptBox.childNodes[1].innerHTML.toLowerCase()) {
                            conceptBox.childNodes[0].classList.add('checked');
                            conceptBox.isChecked = true;
                            conceptBox.childNodes[0].isChecked = true;
                            this.newNames.push(boxes[count]);
                        }
                    }
                }
            }
        }

        if (this.newNames.length > 0) {
            document.getElementsByClassName("nav-bottom")[0].classList.add('deselect');
            if (window.innerWidth > 900) {
                document.getElementsByClassName('clear-item')[0].classList.remove('hide-back');
            }
            this.setSearched(true);
        } else {
            document.getElementsByClassName("nav-bottom")[0].classList.remove('deselect');
            document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
            this.setSearched(false);
        }

    };

    SideNavigation.prototype.conceptBoxFn = function(e) {
        e.stopPropagation();
        var filter_Eid, filterID;
        /* for(var i = 0 ; i < this.dataEidArray.length ; i++){
         	for(var j = 0 ; j < this.dataEidArray[i].length ; j++){
             	if(this.dataEidArray[i][j] == e.currentTarget.innerText){
             		 filter_Eid = this.dataEidArray[i][j] ;
             	}
             }
         }*/

        var listName = getNthParentOf(e.target, 6);

        if (listName.className == "sort-item concept-filter-list") {

            for (var i = 0; i < conceptsEidArray.length; i++) {
                if (conceptsEidArray[i].name == e.currentTarget.parentElement.childNodes[1].innerText) {
                    filter_Eid = conceptsEidArray[i].encodedID;
                }
            }
            filterID = "context_eid";
        } else if (listName.className == "sort-item standards-filter-list") {

            for (var i = 0; i < standardsIdArray.length; i++) {

                if (standardsIdObject[standardsIdArray[i]].label == e.target.nextElementSibling.innerHTML) {
                    filter_Eid = standardsIdObject[standardsIdArray[i]].sid;
                }

            }
            filterID = "sid";
        }

        if (e.currentTarget.isChecked) {
            e.currentTarget.childNodes[0].classList.remove('checked');
            e.currentTarget.isChecked = false;
            e.currentTarget.childNodes[0].isChecked = false;

            e.currentTarget.parentNode.parentNode.firstChild.classList.remove('checked');
            e.currentTarget.parentNode.parentNode.firstChild.isChecked = false;
        } else {
            e.currentTarget.childNodes[0].classList.add('checked');
            e.currentTarget.isChecked = true;
            e.currentTarget.childNodes[0].isChecked = true;

            /*if(!this.dataGroup){
    			if(filterID == "context_eid"){
        			dexterjs.logEvent("FBS_SIMULATION_FILTER", {
                        context_eid : filter_Eid
                    });
        		}else if(filterID == "sid"){
        			dexterjs.logEvent("FBS_SIMULATION_FILTER_STANDARD", {
                        sid : filter_Eid,
                        filterType:"standard"
                    });
        		}
    			//_dexterEventCheckBox(filter_Eid);
    			//_dexterEventCheckBox.apply(this,[filter_Eid]);
    		}*/

            if (e.currentTarget.parentNode.parentNode.childNodes[0].isChecked == false) {
                for (var conceptCount = 0; conceptCount < e.currentTarget.parentNode.childNodes.length; conceptCount++) {
                    var conceptBox = e.currentTarget.parentNode.childNodes[conceptCount];
                    if (conceptBox.isChecked == false) {
                        break;
                    } else if (conceptCount == (e.currentTarget.parentNode.childNodes.length - 1)) {
                        e.currentTarget.parentNode.parentNode.childNodes[0].click();
                    }
                }
            }
        }

        var name = e.currentTarget.childNodes[1].getAttribute("data") ? e.currentTarget.childNodes[1].getAttribute("data").toLowerCase() : e.currentTarget.childNodes[1].innerHTML.toLowerCase();
        this.oldNames = this.newNames;
        this.newNames = [];

        for (var i = 0; i < this.oldNames.length; i++) {
            if (this.oldNames[i] == name) {
                //this.names = this.names.splice(i, 1);
            } else {
                this.newNames.push(this.oldNames[i]);
            }
        }

        if (this.newNames.length == 0 && e.currentTarget.isChecked || e.currentTarget.isChecked) {
            this.newNames.push(name);
        }
        var filterContHeight;
        if (this.newNames.length > 0) {
            filterContHeight = window.innerHeight - 140 - 45;
            //    		if(document.getElementsByClassName("filter-container")[0].style.height != filterContHeight +"px")
            document.getElementsByClassName("filter-container")[0].style.height = filterContHeight + "px";
            document.getElementsByClassName("nav-bottom")[0].classList.add('deselect');
            if (window.innerWidth > 900) {
                document.getElementsByClassName('clear-item')[0].classList.remove('hide-back');
            }
            this.setSearched(true);
        } else {
            if (sidenav2.newNames.length == 0 && sidenav.newNames.length == 0) {
                filterContHeight = window.innerHeight - 140;
                //    			if(document.getElementsByClassName("filter-container")[0].style.height != filterContHeight +"px")
                document.getElementsByClassName("filter-container")[0].style.height = filterContHeight + "px";
                document.getElementsByClassName("nav-bottom")[0].classList.remove('deselect');
            }
            document.getElementsByClassName('clear-item')[0].classList.add('hide-back');
            this.setSearched(false);
        }

        this.search(this.newNames);
    };

    function getNthParentOf(elem, i) {
        while (i > 0) {
            elem = elem.parentElement;
            i--;
        }
        return elem;
    }

    /*  function _dexterEventCheckBox(){
  	  	dexterjs.logEvent("FBS_SIMULATION_FILTER", {
            context_eid : filter_Eid
        });
    }*/

    return SideNavigation;

});;
define('ajax', [], function() {

    /**
     * @namespace ajax
     */
    var ajax = {};

    /**
     * ajax GET method
     * @method loadURL
     * @memberof ajax
     * @param {string} URI to the location
     * @param {function | object} callback function callback to the ajax request, if Object is passed callback would be included inside the object
     */
    ajax.loadURL = function(url, options) {
        var callback = options,
            xhr = new XMLHttpRequest();

        if (options instanceof Object && !(options instanceof Function)) {
            callback = options.callback;
            for (var x in options) {
                if (options.hasOwnProperty(x)) {
                    xhr[x] = options[x];
                }
            }
        }

        xhr.onreadystatechange = function() {
            if (this.readyState === 4) {
                if (callback) callback(this.responseText);
            }
        };
        xhr.open('GET', url);
        xhr.send();
    };

    return ajax;

});