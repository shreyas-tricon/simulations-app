{
  "_args": [
    [
      {
        "raw": "cordova.plugins.diagnostic@D:\\ck12-Plugins\\cordova.plugins.diagnostic",
        "scope": null,
        "escapedName": "cordova.plugins.diagnostic",
        "name": "cordova.plugins.diagnostic",
        "rawSpec": "D:\\ck12-Plugins\\cordova.plugins.diagnostic",
        "spec": "D:\\ck12-Plugins\\cordova.plugins.diagnostic",
        "type": "directory"
      },
      "D:\\ck12-sim-app-final\\sim-app-android"
    ]
  ],
  "_from": "..\\..\\ck12-Plugins\\cordova.plugins.diagnostic",
  "_id": "cordova.plugins.diagnostic@2.3.17",
  "_inCache": true,
  "_location": "/cordova.plugins.diagnostic",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova.plugins.diagnostic@D:\\ck12-Plugins\\cordova.plugins.diagnostic",
    "scope": null,
    "escapedName": "cordova.plugins.diagnostic",
    "name": "cordova.plugins.diagnostic",
    "rawSpec": "D:\\ck12-Plugins\\cordova.plugins.diagnostic",
    "spec": "D:\\ck12-Plugins\\cordova.plugins.diagnostic",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:..\\..\\ck12-Plugins\\cordova.plugins.diagnostic",
  "_shasum": "91876b4c0be85ace00cc23713477b5a441a0eca7",
  "_shrinkwrap": null,
  "_spec": "cordova.plugins.diagnostic@D:\\ck12-Plugins\\cordova.plugins.diagnostic",
  "_where": "D:\\ck12-sim-app-final\\sim-app-android",
  "author": {
    "name": "Dave Alden"
  },
  "bugs": {
    "url": "https://github.com/dpa99c/cordova-diagnostic-plugin/issues"
  },
  "cordova": {
    "id": "cordova.plugins.diagnostic",
    "platforms": [
      "android",
      "ios",
      "windows"
    ]
  },
  "cordova_name": "Diagnostic",
  "dependencies": {},
  "description": "Cordova/Phonegap plugin to check the state of Location/WiFi/Camera/Bluetooth device settings.",
  "devDependencies": {},
  "homepage": "https://github.com/dpa99c/cordova-diagnostic-plugin#readme",
  "issue": "https://github.com/dpa99c/cordova-diagnostic-plugin/issues",
  "keywords": [
    "ecosystem:cordova",
    "cordova",
    "android",
    "ios",
    "windows",
    "phonegap",
    "diagnostic",
    "wifi",
    "location",
    "gps",
    "camera",
    "bluetooth",
    "settings"
  ],
  "license": "MIT",
  "name": "cordova.plugins.diagnostic",
  "optionalDependencies": {},
  "readme": "Cordova diagnostic plugin\r\n=========================\r\n\r\n<!-- START table-of-contents -->\r\n**Table of Contents**\r\n\r\n- [Overview](#overview)\r\n  - [Important Android Note](#important-android-note)\r\n    - [Building for API 22 or lower](#building-for-api-22-or-lower)\r\n- [Installation](#installation)\r\n  - [Using the Cordova/Phonegap CLI](#using-the-cordovaphonegap-cli)\r\n  - [Using Cordova Plugman](#using-cordova-plugman)\r\n  - [PhoneGap Build](#phonegap-build)\r\n- [Usage](#usage)\r\n  - [Android, iOS and Windows 10 Mobile](#android-ios-and-windows-10-mobile)\r\n    - [isLocationEnabled()](#islocationenabled)\r\n    - [isWifiEnabled()](#iswifienabled)\r\n    - [isCameraEnabled()](#iscameraenabled)\r\n    - [isBluetoothEnabled()](#isbluetoothenabled)\r\n  - [Android and Windows 10 Mobile only](#android-and-windows-10-mobile-only)\r\n    - [switchToLocationSettings()](#switchtolocationsettings)\r\n    - [switchToMobileDataSettings()](#switchtomobiledatasettings)\r\n    - [switchToBluetoothSettings()](#switchtobluetoothsettings)\r\n    - [switchToWifiSettings()](#switchtowifisettings)\r\n    - [setWifiState()](#setwifistate)\r\n    - [setBluetoothState()](#setbluetoothstate)\r\n  - [Android and iOS](#android-and-ios)\r\n    - [isLocationAuthorized()](#islocationauthorized)\r\n    - [getLocationAuthorizationStatus()](#getlocationauthorizationstatus)\r\n    - [requestLocationAuthorization()](#requestlocationauthorization)\r\n    - [isCameraPresent()](#iscamerapresent)\r\n    - [isCameraAuthorized()](#iscameraauthorized)\r\n    - [getCameraAuthorizationStatus()](#getcameraauthorizationstatus)\r\n    - [requestCameraAuthorization()](#requestcameraauthorization)\r\n    - [isMicrophoneAuthorized()](#ismicrophoneauthorized)\r\n    - [getMicrophoneAuthorizationStatus()](#getmicrophoneauthorizationstatus)\r\n    - [requestMicrophoneAuthorization()](#requestmicrophoneauthorization)\r\n    - [switchToSettings()](#switchtosettings)\r\n  - [Android only](#android-only)\r\n    - [isGpsLocationEnabled()](#isgpslocationenabled)\r\n    - [isNetworkLocationEnabled()](#isnetworklocationenabled)\r\n    - [getLocationMode()](#getlocationmode)\r\n    - [getPermissionAuthorizationStatus()](#getpermissionauthorizationstatus)\r\n    - [getPermissionsAuthorizationStatus()](#getpermissionsauthorizationstatus)\r\n    - [requestRuntimePermission()](#requestruntimepermission)\r\n    - [requestRuntimePermissions()](#requestruntimepermissions)\r\n    - [hasBluetoothLESupport()](#hasbluetoothlesupport)\r\n    - [hasBluetoothLEPeripheralSupport()](#hasbluetoothleperipheralsupport)\r\n  - [iOS only](#ios-only)\r\n    - [isLocationEnabledSetting()](#islocationenabledsetting)\r\n    - [registerLocationAuthorizationStatusChangeHandler()](#registerlocationauthorizationstatuschangehandler)\r\n    - [isCameraRollAuthorized()](#iscamerarollauthorized)\r\n    - [getCameraRollAuthorizationStatus()](#getcamerarollauthorizationstatus)\r\n    - [requestCameraRollAuthorization()](#requestcamerarollauthorization)\r\n    - [getBluetoothState()](#getbluetoothstate)\r\n    - [registerBluetoothStateChangeHandler()](#registerbluetoothstatechangehandler)\r\n    - [isRemoteNotificationsEnabled()](#isremotenotificationsenabled)\r\n    - [isRegisteredForRemoteNotifications()](#isregisteredforremotenotifications)\r\n    - [getRemoteNotificationTypes()](#getremotenotificationtypes)\r\n- [Notes](#notes)\r\n  - [Android permissions](#android-permissions)\r\n    - [Android runtime permissions](#android-runtime-permissions)\r\n  - [Windows 10 Mobile permissions](#windows-10-mobile-permissions)\r\n  - [iOS location permission messages](#ios-location-permission-messages)\r\n- [Example project](#example-project)\r\n  - [Screenshots](#screenshots)\r\n    - [Android](#android)\r\n    - [iOS](#ios)\r\n- [Release notes](#release-notes)\r\n- [Credits](#credits)\r\n- [License](#license)\r\n<!-- END table-of-contents -->\r\n\r\n\r\n# Overview\r\n\r\nThis Cordova/Phonegap plugin for iOS, Android and Windows 10 Mobile is used to check the state of the following device settings:\r\n\r\n- Location\r\n- WiFi\r\n- Camera\r\n- Bluetooth\r\n\r\nThe plugin also enables an app to show the relevant settings screen, to allow users to change the above device settings.\r\n\r\nThe plugin is registered in on [npm](https://www.npmjs.com/package/cordova.plugins.diagnostic) as `cordova.plugins.diagnostic`\r\n\r\n## Important Android Note\r\n\r\nThis plugin has been updated to support Android 6 (API 23) [runtime permissions](http://developer.android.com/training/permissions/requesting.html).\r\n\r\nIn order to do this it must depend on libraries only present in API 23+, so you __must build using Android SDK Platform v23 or above__. To do this you must have [Cordova Android platform](https://github.com/apache/cordova-android)@5.0.0 or above installed in your project. You can check the currently installed platform versions with the following command:\r\n\r\n    cordova platform ls\r\n\r\n__Note:__ Attempting to build with API 22 or below will result in a build error.\r\n\r\n\r\nYou __must__ also make sure your build environment has the following Android libraries installed. In a local build environment, you'd install these via the Android SDK Manager:\r\n\r\n -  Android Support Library - Rev. 23 or above\r\n -  Android Support Repository - Rev. 23 or above\r\n\r\n### Building for API 22 or lower\r\n\r\nIf you wish to build against API 22 or below, there is a [legacy branch of this plugin repo](https://github.com/dpa99c/cordova-diagnostic-plugin/tree/api-22) which contains all the functionality __except Android 6 runtime permissions__. This removes the dependency on API 23 and will allow you to build against earlier API versions.\r\n\r\n**NOTE**: Phonegap Build now supports API 23, so its users may use the main plugin branch (`cordova.plugins.diagnostic`).\r\n\r\nThe legacy branch is published to npm as [`cordova.plugins.diagnostic.api-22`](https://www.npmjs.com/package/cordova.plugins.diagnostic.api-22), so you'll need to use this plugin ID when adding it:\r\n\r\n    cordova plugin add cordova.plugins.diagnostic.api-22\r\n\r\n# Installation\r\n\r\n## Using the Cordova/Phonegap CLI\r\n\r\n    $ cordova plugin add cordova.plugins.diagnostic\r\n    $ phonegap plugin add cordova.plugins.diagnostic\r\n\r\n**NOTE**: Make sure your Cordova CLI version is 5.0.0+ (check with `cordova -v`). Cordova 4.x and below uses the now deprecated [Cordova Plugin Registry](http://plugins.cordova.io) as its plugin repository, so using a version of Cordova 4.x or below will result in installing an [old version](http://plugins.cordova.io/#/package/cordova.plugins.diagnostic) of this plugin.\r\n\r\n## Using Cordova Plugman\r\n\r\n    $ plugman install --plugin=cordova.plugins.diagnostic --platform=<platform> --project=<project_path> --plugins_dir=plugins\r\n\r\nFor example, to install for the Android platform\r\n\r\n    $ plugman install --plugin=cordova.plugins.diagnostic --platform=android --project=platforms/android --plugins_dir=plugins\r\n\r\n## PhoneGap Build\r\nAdd the following xml to your config.xml to use the latest version of this plugin from [npm](https://www.npmjs.com/package/cordova.plugins.diagnostic):\r\n\r\n    <plugin name=\"cordova.plugins.diagnostic\" source=\"npm\" />\r\n\r\n# Usage\r\n\r\nThe plugin is exposed via the `cordova.plugins.diagnostic` object and provides the following functions:\r\n\r\n## Android, iOS and Windows 10 Mobile\r\n\r\n### isLocationEnabled()\r\n\r\nChecks if app is able to access device location.\r\n\r\n    cordova.plugins.diagnostic.isLocationEnabled(successCallback, errorCallback);\r\n\r\nOn iOS and Windows 10 Mobile this returns true if both the device setting for Location Services is ON, AND the application is authorized to use location.\r\nWhen location is enabled, the locations returned are by a mixture GPS hardware, network triangulation and Wifi network IDs.\r\n\r\nOn Android, this returns true if Location mode is enabled and any mode is selected (e.g. Battery saving, Device only, High accuracy)\r\nWhen location is enabled, the locations returned are dependent on the location mode:\r\n\r\n* Battery saving = network triangulation and Wifi network IDs (low accuracy)\r\n* Device only = GPS hardware only (high accuracy)\r\n* High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if location is available for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isLocationEnabled(function(enabled){\r\n        console.log(\"Location is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### isWifiEnabled()\r\n\r\nChecks if Wifi is connected/enabled.\r\nOn iOS this returns true if the device is connected to a network by WiFi.\r\nOn Android and Windows 10 Mobile this returns true if the WiFi setting is set to enabled.\r\n\r\nOn Android this requires permission `<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />`\r\n\r\n    cordova.plugins.diagnostic.isWifiEnabled(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if device is connected by WiFi.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isWifiEnabled(function(enabled){\r\n        console.log(\"WiFi is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n\r\n### isCameraEnabled()\r\n\r\nChecks if the device has a camera.\r\nOn Android this returns true if the device has a camera.\r\nOn iOS this returns true if both the device has a camera AND the application is authorized to use it.\r\nOn Windows 10 Mobile this returns true if both the device has a rear-facing camera AND the application is authorized to use it.\r\n\r\n    cordova.plugins.diagnostic.isCameraEnabled(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if camera is present and authorized for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isCameraEnabled(function(exists){\r\n        console.log(\"Device \" + (exists ? \"does\" : \"does not\") + \" have a camera\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### isBluetoothEnabled()\r\n\r\nChecks if the device has Bluetooth capabilities and if so that Bluetooth is switched on (same on Android, iOS and Windows 10 Mobile)\r\n\r\nOn Android this requires permission `<uses-permission android:name=\"android.permission.BLUETOOTH\" />`\r\n\r\n    cordova.plugins.diagnostic.isBluetoothEnabled(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE and Bluetooth is switched on.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isBluetoothEnabled(function(enabled){\r\n        console.log(\"Bluetooth is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n## Android and Windows 10 Mobile only\r\n\r\n### switchToLocationSettings()\r\n\r\nDisplays the device location settings to allow user to enable location services/change location mode.\r\n\r\n    cordova.plugins.diagnostic.switchToLocationSettings();\r\n\r\nNote: On Android, you may want to consider using the [Request Location Accuracy Plugin for Android](https://github.com/dpa99c/cordova-plugin-request-location-accuracy) to request the desired location accuracy without needing the user to manually do this on the Location Settings page.\r\n\r\n### switchToMobileDataSettings()\r\n\r\nDisplays mobile settings to allow user to enable mobile data.\r\n\r\n    cordova.plugins.diagnostic.switchToMobileDataSettings();\r\n\r\n### switchToBluetoothSettings()\r\n\r\nDisplays Bluetooth settings to allow user to enable Bluetooth.\r\n\r\n    cordova.plugins.diagnostic.switchToBluetoothSettings();\r\n\r\n### switchToWifiSettings()\r\n\r\nDisplays WiFi settings to allow user to enable WiFi.\r\n\r\n    cordova.plugins.diagnostic.switchToWifiSettings();\r\n\r\n### setWifiState()\r\n\r\nEnables/disables WiFi on the device.\r\n\r\n    cordova.plugins.diagnostic.setWifiState(successCallback, errorCallback, state);\r\n\r\nRequires the following permissions for Android:\r\n\r\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\"/>\r\n    <uses-permission android:name=\"android.permission.CHANGE_WIFI_STATE\"/>\r\n\r\nRequires the following capabilities for Windows 10 Mobile:\r\n\r\n    <DeviceCapability Name=\"radios\" />\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful setting of WiFi state\r\n- {Function} errorCallback - function to call on failure to set WiFi state.\r\n- {Boolean} state - WiFi state to set: TRUE for enabled, FALSE for disabled.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.setWifiState(function(){\r\n        console.log(\"Wifi was enabled\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    },\r\n    true);\r\n\r\n### setBluetoothState()\r\n\r\nEnables/disables Bluetooth on the device.\r\n\r\n    cordova.plugins.diagnostic.setBluetoothState(successCallback, errorCallback, state);\r\n\r\nRequires the following permissions on Android:\r\n\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\"/>\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\"/>\r\n\r\nRequires the following capabilities for Windows 10 Mobile:\r\n\r\n    <DeviceCapability Name=\"radios\" />\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful setting of Bluetooth state\r\n- {Function} errorCallback - function to call on failure to set Bluetooth state.\r\n- {Boolean} state - Bluetooth state to set: TRUE for enabled, FALSE for disabled.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.setBluetoothState(function(){\r\n        console.log(\"Bluetooth was enabled\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    },\r\n    true);\r\n\r\n## Android and iOS\r\n\r\n### isLocationAuthorized()\r\n\r\nChecks if the application is authorized to use location.\r\n\r\nNote for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n    cordova.plugins.diagnostic.isLocationAuthorized(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter.\r\nOn iOS this will return TRUE if application is authorized to use location either \"when in use\" (only in foreground) OR \"always\" (foreground and background).\r\nOn Android this will return TRUE if the app currently has runtime authorisation to use location.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isLocationAuthorized(function(enabled){\r\n        console.log(\"Location authorization is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getLocationAuthorizationStatus()\r\n\r\n Returns the location authorization status for the application.\r\n\r\n Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n    cordova.plugins.diagnostic.getLocationAuthorizationStatus(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the location authorization status.\r\nOn iOS, possible values are: \"unknown\", \"denied\", \"not_determined\", \"authorized_always\", \"authorized_when_in_use\".\r\nOn Android, possible values are defined in the [Runtime permission statuses](#runtime-permission-statuses) section.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getLocationAuthorizationStatus(function(status){\r\n       console.log(\"Location authorization status: \" + status);\r\n    }, onError);\r\n\r\n\r\n### requestLocationAuthorization()\r\n\r\n Requests location authorization for the application.\r\n\r\n Notes for iOS:\r\n\r\n - Calling this on iOS 7 or below will have no effect, as location permissions are are implicitly granted.\r\n - On iOS 8+, authorization can be requested to use location either \"when in use\" (only in foreground) or \"always\" (foreground and background).\r\n - This should only be called if authorization status is NOT_DETERMINED - calling it when in any other state will have no effect.\r\n - This plugin adds default messages which are displayed to the user upon requesting location authorization - see the [iOS location permission messages](#ios-location-permission-messages) section for how to customise them.\r\n - The successCallback is now invoked in response to the user's choice in the permission dialog, **NOT** on requesting the permission\r\n    - **NOTE:** this was changed in v2.3.12, prior to which these conditions were the reverse of the above.\r\n\r\n Notes for Android:\r\n\r\n - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\r\n - The successCallback is invoked in response to the user's choice in the permission dialog and is passed the resulting authorization status.\r\n\r\n    `cordova.plugins.diagnostic.requestLocationAuthorization(successCallback, errorCallback, mode);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -\r\nOn iOS, this is invoked on successfully requesting the permission, **NOT** in response to the user's choice in the permission dialog. No parameters are passed to the callback.\r\nOn Android, this is is invoked in response to the user's choice in the permission dialog. It is passed a single string parameter which defines the [resulting authorisation status](#runtime-permission-statuses).\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n- {String} mode - (iOS-only / optional) location authorization mode: \"always\" or \"when_in_use\". If not specified, defaults to \"when_in_use\".\r\n\r\n#### Example iOS usage\r\n\r\n    cordova.plugins.diagnostic.requestLocationAuthorization(function(status){\r\n        console.log(\"Authorisation status is now: \"+status);\r\n    }, function(error){\r\n        console.error(error);\r\n    }, \"always\");\r\n\r\n#### Example Android usage\r\n\r\n    cordova.plugins.diagnostic.requestLocationAuthorization(function(status){\r\n        console.log(\"Authorisation status is now: \"+status);\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n### isCameraPresent()\r\n\r\nChecks if camera hardware is present on device.\r\n\r\n    cordova.plugins.diagnostic.isCameraPresent(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if camera is present\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isCameraPresent(function(present){\r\n        console.log(\"Camera is \" + (present ? \"present\" : \"absent\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### isCameraAuthorized()\r\n\r\nChecks if the application is authorized to use the camera.\r\n\r\nNotes for Android:\r\n- This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.\r\n- This checks for both `READ_EXTERNAL_STORAGE` and `CAMERA` run-time permissions - see [Android camera permissions](#android-camera-permissions).\r\n\r\n    `cordova.plugins.diagnostic.isCameraAuthorized(successCallback, errorCallback);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if camera is authorized for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isCameraAuthorized(function(authorized){\r\n        console.log(\"App is \" + (authorized ? \"authorized\" : \"denied\") + \" access to the camera\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getCameraAuthorizationStatus()\r\n\r\n Returns the camera authorization status for the application.\r\n\r\n Notes for Android:\r\n - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n - This checks for both `READ_EXTERNAL_STORAGE` and `CAMERA` run-time permissions - see [Android camera permissions](#android-camera-permissions).\r\n\r\n    `cordova.plugins.diagnostic.getCameraAuthorizationStatus(successCallback, errorCallback);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the authorization status.\r\nOn iOS, possible values are: \"unknown\", \"denied\", \"not_determined\", \"authorized\".\r\nOn Android, possible values are defined in the [Runtime permission statuses](#runtime-permission-statuses) section.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getCameraAuthorizationStatus(function(status){\r\n       console.log(\"Camera authorization status: \" + status);\r\n    }, onError);\r\n\r\n### requestCameraAuthorization()\r\n\r\nRequests camera authorization for the application.\r\n\r\nNotes for iOS:\r\n - Should only be called if authorization status is NOT_DETERMINED. Calling it when in any other state will have no effect.\r\n\r\nNotes for Android:\r\n - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\r\n - This requests permission for both `READ_EXTERNAL_STORAGE` and `CAMERA` run-time permissions - see [Android camera permissions](#android-camera-permissions).\r\n\r\n    `cordova.plugins.diagnostic.requestCameraAuthorization(successCallback, errorCallback);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nOn iOS, the callback function is passed a single boolean parameter indicating whether access to the camera was granted or denied.\r\nOn Android, the callback function is passed a single string parameter which defines the [resulting authorisation status](#runtime-permission-statuses).\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example iOS usage\r\n\r\n    cordova.plugins.diagnostic.requestCameraAuthorization(function(granted){\r\n        console.log(\"Authorization request for camera use was \" + (granted ? \"granted\" : \"denied\"));\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n#### Example Android usage\r\n\r\n    cordova.plugins.diagnostic.requestCameraAuthorization(function(status){\r\n        console.log(\"Authorization status for camera is \" + status);\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n### isMicrophoneAuthorized()\r\n\r\nChecks if the application is authorized to use the microphone.\r\n\r\nNotes for Android:\r\n- This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.\r\n\r\nNotes for iOS:\r\n- Requires iOS 8+\r\n\r\n    `cordova.plugins.diagnostic.isMicrophoneAuthorized(successCallback, errorCallback);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if microphone is authorized for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isMicrophoneAuthorized(function(authorized){\r\n        console.log(\"App is \" + (authorized ? \"authorized\" : \"denied\") + \" access to the microphone\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getMicrophoneAuthorizationStatus()\r\n\r\n Returns the microphone authorization status for the application.\r\n\r\n Notes for Android:\r\n - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n Notes for iOS:\r\n - Requires iOS 8+\r\n\r\n    `cordova.plugins.diagnostic.getMicrophoneAuthorizationStatus(successCallback, errorCallback);`\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the authorization status.\r\nOn iOS, possible values are: \"unknown\", \"denied\", \"not_determined\", \"authorized\".\r\nOn Android, possible values are defined in the [Runtime permission statuses](#runtime-permission-statuses) section.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getMicrophoneAuthorizationStatus(function(status){\r\n       console.log(\"Camera authorization status: \" + status);\r\n    }, onError);\r\n\r\n\r\n### requestMicrophoneAuthorization()\r\n\r\nRequests microphone authorization for the application.\r\n\r\nNotes for iOS:\r\n - Should only be called if authorization status is NOT_DETERMINED. Calling it when in any other state will have no effect and just return the current authorization status.\r\n - Requires iOS 7+\r\n\r\nNotes for Android:\r\n - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\r\n\r\n    cordova.plugins.diagnostic.requestMicrophoneAuthorization(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n- {Function} successCallback - The callback which will be called when operation is successful.\r\nOn Android this callback function is passed a single string parameter which indicates the authorization status - possible values are: \"unknown\", \"denied\", \"not_determined\", \"authorized\".\r\nOn iOS this callback function is passed a single boolean parameter which indicates the authorization status.\r\n\r\n- {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n#### Example iOS usage\r\n\r\n     cordova.plugins.diagnostic.requestMicrophoneAuthorization(function(granted){\r\n            console.log(\"Microphone access is: \"+(granted ? \"granted\" : \"denied\"));\r\n        }, function(error){\r\n            console.error(\"The following error occurred: \"+error);\r\n        });\r\n#### Example Android usage\r\n\r\n    cordova.plugins.diagnostic.requestMicrophoneAuthorization(function(status){\r\n        console.log(Microphone access is: \"+status);\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n### switchToSettings()\r\n\r\nOpens settings page for this app.\r\n\r\nOn Android, this opens the \"App Info\" page in the Settings app.\r\n\r\nOn iOS, this opens the app settings page in the Settings app. This works only on iOS 8+ - iOS 7 and below will invoke the errorCallback.\r\n\r\n    cordova.plugins.diagnostic.switchToSettings(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - The callback which will be called when switch to settings is successful.\r\n- {Function} errorCallback - The callback which will be called when switch to settings encounters an error. This callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.switchToSettings(function(){\r\n        console.log(\"Successfully switched to Settings app\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n## Android only\r\n\r\n### isGpsLocationEnabled()\r\n\r\nChecks if location mode is set to return high-accuracy locations from GPS hardware.\r\n\r\n    cordova.plugins.diagnostic.isGpsLocationEnabled(successCallback, errorCallback);\r\n\r\nReturns true if Location mode is enabled and is set to either:\r\n\r\n* Device only = GPS hardware only (high accuracy)\r\n* High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if high-accuracy GPS-based location is available for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isGpsLocationEnabled(function(enabled){\r\n        console.log(\"GPS location is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### isNetworkLocationEnabled()\r\n\r\nChecks if location mode is set to return low-accuracy locations from network triangulation/WiFi access points.\r\n\r\n    cordova.plugins.diagnostic.isNetworkLocationEnabled(successCallback, errorCallback);\r\n\r\nReturns true if Location mode is enabled and is set to either:\r\n\r\n* Battery saving = network triangulation and Wifi network IDs (low accuracy)\r\n* High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if low-accuracy network-based location is available for use.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isNetworkLocationEnabled(function(enabled){\r\n        console.log(\"Network location is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getLocationMode()\r\n\r\nReturns the current location mode setting for the device.\r\n\r\n    cordova.plugins.diagnostic.getLocationMode(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the current location mode.\r\nValues that may be passed to the success callback:\r\n    - \"high_accuracy\" - GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\r\n    - \"device_only\" - GPS hardware only (high accuracy)\r\n    - \"battery_saving\" - network triangulation and Wifi network IDs (low accuracy)\r\n    - \"location_off\" - Location is turned off\r\n    - {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getLocationMode(function(mode){\r\n        console.log(\"Current location mode is: \" + mode);\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getPermissionAuthorizationStatus()\r\n\r\nReturns the current authorisation status for a given permission.\r\n\r\nNote: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful retrieval of status.\r\nThis callback function is passed a single string parameter which defines the current [authorisation status](#runtime-permission-statuses)\r\n- {Function} errorCallback - function to call on failure to retrieve authorisation status.\r\nThis callback function is passed a single string parameter containing the error message.\r\n- {String} permission - permission to request authorisation status for, defined as a [runtime permission constant](#dangerous-runtime-permissions).\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getPermissionAuthorizationStatus(function(status){\r\n        switch(status){\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.GRANTED:\r\n                console.log(\"Permission granted to use the camera\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.NOT_REQUESTED:\r\n                console.log(\"Permission to use the camera has not been requested yet\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED:\r\n                console.log(\"Permission denied to use the camera - ask again?\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED_ALWAYS:\r\n                console.log(\"Permission permanently denied to use the camera - guess we won't be using it then!\");\r\n                break;\r\n        }\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    }, cordova.plugins.diagnostic.runtimePermission.CAMERA);\r\n\r\n### getPermissionsAuthorizationStatus()\r\n\r\nReturns the current authorisation status for multiple permissions.\r\n\r\nNote: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful retrieval of status.\r\nThis callback function is passed a single object parameter which defines a key/value map, where the key is the requested [runtime permission](#dangerous-runtime-permissions), and the value is the current [authorisation status](#runtime-permission-statuses).\r\n- {Function} errorCallback - function to call on failure to retrieve authorisation status.\r\nThis callback function is passed a single string parameter containing the error message.\r\n- {Array} permissions - list of permissions to request authorisation statuses for, defined as [runtime permission constants](#dangerous-runtime-permissions).\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getPermissionsAuthorizationStatus(function(statuses){\r\n        for (var permission in statuses){\r\n            switch(statuses[permission){\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.GRANTED:\r\n                    console.log(\"Permission granted to use \"+permission);\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.NOT_REQUESTED:\r\n                    console.log(\"Permission to use \"+permission+\" has not been requested yet\");\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED:\r\n                    console.log(\"Permission denied to use \"+permission+\" - ask again?\");\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED_ALWAYS:\r\n                    console.log(\"Permission permanently denied to use \"+permission+\" - guess we won't be using it then!\");\r\n                    break;\r\n            }\r\n        }\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    },[\r\n        cordova.plugins.diagnostic.runtimePermission.ACCESS_FINE_LOCATION,\r\n        cordova.plugins.diagnostic.runtimePermission.ACCESS_COARSE_LOCATION\r\n    ]);\r\n\r\n### requestRuntimePermission()\r\n\r\nRequests app to be granted authorisation for a runtime permission.\r\n\r\nNote: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful request for runtime permission.\r\nThis callback function is passed a single string parameter which defines the resulting [authorisation status](#runtime-permission-statuses)\r\n- {Function} errorCallback - function to call on failure to request authorisation.\r\nThis callback function is passed a single string parameter containing the error message.\r\n - {String} permission - permission to request authorisation for, defined as a [runtime permission constant](#dangerous-runtime-permissions).\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.requestRuntimePermission(function(status){\r\n        switch(status){\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.GRANTED:\r\n                console.log(\"Permission granted to use the camera\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.NOT_REQUESTED:\r\n                console.log(\"Permission to use the camera has not been requested yet\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED:\r\n                console.log(\"Permission denied to use the camera - ask again?\");\r\n                break;\r\n            case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED_ALWAYS:\r\n                console.log(\"Permission permanently denied to use the camera - guess we won't be using it then!\");\r\n                break;\r\n        }\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    }, cordova.plugins.diagnostic.runtimePermission.CAMERA);\r\n\r\n\r\n### requestRuntimePermissions()\r\n\r\nRequests app to be granted authorisation for multiple runtime permissions.\r\n\r\nNote: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback - function to call on successful request for runtime permissions.\r\nThis callback function is passed a single object parameter which defines a key/value map, where the key is the [runtime permission](#dangerous-runtime-permissions) to request, and the value is the current [authorisation status](#runtime-permission-statuses).\r\n- {Function} errorCallback - function to call on failure to request authorisation.\r\nThis callback function is passed a single string parameter containing the error message.\r\n- {Array} permissions - list of permissions to request authorisation for, defined as [runtime permission constants](#dangerous-runtime-permissions).\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.requestRuntimePermissions(function(statuses){\r\n        for (var permission in statuses){\r\n            switch(statuses[permission]){\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.GRANTED:\r\n                    console.log(\"Permission granted to use \"+permission);\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.NOT_REQUESTED:\r\n                    console.log(\"Permission to use \"+permission+\" has not been requested yet\");\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED:\r\n                    console.log(\"Permission denied to use \"+permission+\" - ask again?\");\r\n                    break;\r\n                case cordova.plugins.diagnostic.runtimePermissionStatus.DENIED_ALWAYS:\r\n                    console.log(\"Permission permanently denied to use \"+permission+\" - guess we won't be using it then!\");\r\n                    break;\r\n            }\r\n        }\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    },[\r\n        cordova.plugins.diagnostic.runtimePermission.ACCESS_FINE_LOCATION,\r\n        cordova.plugins.diagnostic.runtimePermission.ACCESS_COARSE_LOCATION\r\n    ]);\r\n\r\n### hasBluetoothLESupport()\r\n\r\nChecks if the device has Bluetooth Low Energy (LE) capabilities.\r\nSee http://developer.android.com/guide/topics/connectivity/bluetooth-le.html.\r\n\r\n    cordova.plugins.diagnostic.hasBluetoothLESupport(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when the operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if device has Bluetooth LE capabilities.\r\n- {Function} errorCallback -  The callback which will be called when the operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.hasBluetoothLESupport(function(supported){\r\n        console.log(\"Bluetooth LE is \" + (supported ? \"supported\" : \"unsupported\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n\r\n### hasBluetoothLEPeripheralSupport()\r\nChecks if the device supports Bluetooth Low Energy (LE) Peripheral mode.\r\nSee http://developer.android.com/guide/topics/connectivity/bluetooth-le.html#roles.\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when the operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if device supports Bluetooth LE Peripheral mode.\r\n- {Function} errorCallback -  The callback which will be called when the operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.hasBluetoothLEPeripheralSupport(function(supported){\r\n        console.log(\"Bluetooth LE Peripheral Mode is \" + (supported ? \"supported\" : \"unsupported\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n## iOS only\r\n\r\n### isLocationEnabledSetting()\r\n\r\nReturns true if the device setting for location is on.\r\n\r\n    cordova.plugins.diagnostic.isLocationEnabledSetting(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if Location Services is enabled.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isLocationEnabledSetting(function(enabled){\r\n        console.log(\"Location setting is \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### registerLocationAuthorizationStatusChangeHandler()\r\n\r\n**DEPRECATED: This function will be removed in a future version. You should now use the successCallback of [requestLocationAuthorization()](#requestLocationAuthorization) to determine the outcome of user choice in the native dialog.**\r\n\r\n Registers a function to be called when a change in location authorization status occurs.\r\n\r\n Note that the callback function registered with `registerLocationAuthorizationStatusChangeHandler()` will only be called when your app is in the foreground, so if you are leaving your app to go to Settings in order to change the app-specific location authorization setting, then your app is in the background and so `registerLocationAuthorizationStatusChangeHandler()` callback will not be invoked. To handle this situation, you should use `cordova.plugins.diagnostic.isLocationAuthorized()` to check the location authorization state when your app is resumed from the background.\r\n\r\n In practice, `registerLocationAuthorizationStatusChangeHandler()` is only useful when the location authorization is requested for the first time and the native dialog pops up asking the user to allow or deny location access by the app. This only happens the first time the app is run and when location authorization status changes from \"not_determined\" to \"authorized_always\" or \"authorized_when_in_use\". When the user presses either \"OK\" or \"Don't Allow\" in the native dialog, the registered callback will be invoked.\r\n\r\n    cordova.plugins.diagnostic.registerLocationAuthorizationStatusChangeHandler(fn);\r\n\r\n#### Parameters\r\n\r\n- {Function} fn - function call when a change in location authorization status occurs.\r\nThis callback function is passed a single string parameter containing new status.\r\nExpected values are: \"denied\", \"authorized_always\" or \"authorized_when_in_use\"\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.registerLocationAuthorizationStatusChangeHandler(function(status){\r\n        console.log(\"Location authorization status changed from \\\"not_determined\\\" to: \"+status);\r\n    });\r\n\r\n### isCameraRollAuthorized()\r\n\r\nChecks if the application is authorized to use the Camera Roll in Photos app.\r\n\r\n    cordova.plugins.diagnostic.isCameraRollAuthorized(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if access to Camera Roll is authorized.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isCameraRollAuthorized(function(authorized){\r\n        console.log(\"App is \" + (authorized ? \"authorized\" : \"denied\") + \" access to the camera roll\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getCameraRollAuthorizationStatus()\r\n\r\n Returns the authorization status for the application to use the Camera Roll in Photos app.\r\n\r\n    cordova.plugins.diagnostic.getCameraRollAuthorizationStatus(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the authorization status.\r\nPossible values are: \"unknown\", \"denied\", \"not_determined\", \"authorized\"\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getCameraRollAuthorizationStatus(function(status){\r\n       console.log(\"Camera roll authorization status: \" + status);\r\n    }, onError);\r\n\r\n### requestCameraRollAuthorization()\r\n\r\n Requests camera roll authorization for the application.\r\n Should only be called if authorization status is NOT_DETERMINED. Calling it when in any other state will have no effect.\r\n\r\n    cordova.plugins.diagnostic.requestCameraRollAuthorization(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter indicating whether access to the camera roll was granted or denied.\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.requestCameraRollAuthorization(function(granted){\r\n        console.log(\"Authorization request for camera roll was \" + (granted ? \"granted\" : \"denied\"));\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n### getBluetoothState()\r\n\r\n Returns the state of Bluetooth LE on the device.\r\n\r\n    cordova.plugins.diagnostic.getBluetoothState(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n\r\n- {Function} successCallback -  The callback which will be called when operation is successful.\r\nThis callback function is passed a single string parameter which indicates the bluetooth state.\r\nPossible values are: \"unknown\", \"resetting\", \"unsupported\", \"unauthorized\", \"powered_off\", \"powered_on\"\r\n- {Function} errorCallback -  The callback which will be called when operation encounters an error.\r\nThis callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getBluetoothState(function(state){\r\n        console.log(\"Current bluetooth state is: \" + state);\r\n    }, function(error){\r\n        console.error(error);\r\n    });\r\n\r\n### registerBluetoothStateChangeHandler()\r\n\r\n Registers a function to be called when a change in Bluetooth state occurs.\r\n\r\n    cordova.plugins.diagnostic.registerBluetoothStateChangeHandler(fn);\r\n\r\n#### Parameters\r\n\r\n- {Function} fn - function call when a change in Bluetooth state occurs.\r\nThis callback function is passed a single string parameter containing new state.\r\nPossible values are: \"unknown\", \"resetting\", \"unsupported\", \"unauthorized\", \"powered_off\", \"powered_on\"\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.registerBluetoothStateChangeHandler(function(state){\r\n        console.log(\"Bluetooth state changed to: \" + state);\r\n    });\r\n\r\n\r\n### isRemoteNotificationsEnabled()\r\n\r\nChecks if remote (push) notifications are enabled.\r\n\r\nOn iOS 8+, returns true if app is registered for remote notifications **AND** \"Allow Notifications\" switch is ON **AND** alert style is not set to \"None\" (i.e. \"Banners\" or \"Alerts\").\r\n\r\nOn iOS <=7, returns true if app is registered for remote notifications **AND** alert style is not set to \"None\" (i.e. \"Banners\" or \"Alerts\") - same as [isRegisteredForRemoteNotifications()](#isregisteredforremotenotifications).\r\n\r\n    cordova.plugins.diagnostic.isRemoteNotificationsEnabled(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n- {Function} successCallback - The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if remote (push) notifications are enabled.\r\n- {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isRemoteNotificationsEnabled(function(enabled){\r\n        console.log(\"Remote notifications are \" + (enabled ? \"enabled\" : \"disabled\"));\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### isRegisteredForRemoteNotifications()\r\n\r\nIndicates if the app is registered for remote (push) notifications on the device.\r\n\r\nOn iOS 8+, returns true if the app is registered for remote notifications and received its device token, or false if registration has not occurred, has failed, or has been denied by the user.\r\nNote that user preferences for notifications in the Settings app will not affect this.\r\n\r\nOn iOS <=7, returns true if app is registered for remote notifications AND alert style is not set to \"None\" (i.e. \"Banners\" or \"Alerts\") - same as [isRemoteNotificationsEnabled()](#isremotenotificationsenabled).\r\n\r\n    cordova.plugins.diagnostic.isRegisteredForRemoteNotifications(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n- {Function} successCallback - The callback which will be called when operation is successful.\r\nThis callback function is passed a single boolean parameter which is TRUE if the device is registered for remote (push) notifications.\r\n- {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.isRegisteredForRemoteNotifications(function(registered){\r\n        console.log(\"Device \" + (registered ? \"is\" : \"isn't\") + \" registered for remote notifications\");\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n### getRemoteNotificationTypes()\r\n\r\nIndicates the current setting of notification types for the app in the Settings app.\r\n\r\nNote: on iOS 8+, if \"Allow Notifications\" switch is OFF, all types will be returned as disabled.\r\n\r\n    cordova.plugins.diagnostic.getRemoteNotificationTypes(successCallback, errorCallback);\r\n\r\n#### Parameters\r\n- {Function} successCallback - The callback which will be called when operation is successful.\r\nThis callback function is passed a single object parameter where the key is the notification type and the value is a boolean indicating whether it's enabled:\r\n\t * \"alert\" => alert style is not set to \"None\" (i.e. \"Banners\" or \"Alerts\");\r\n\t * \"badge\" => \"Badge App Icon\" switch is ON;\r\n\t * \"sound\" => \"Sounds\"/\"Alert Sound\" switch is ON.\r\n- {Function} errorCallback - The callback which will be called when an error occurs. This callback function is passed a single string parameter containing the error message.\r\n\r\n#### Example usage\r\n\r\n    cordova.plugins.diagnostic.getRemoteNotificationTypes(function(types){\r\n        for(var type in types){\r\n            console.log(type + \" is \" + (types[type] ? \"enabled\" : \"disabled\"));\r\n        }\r\n    }, function(error){\r\n        console.error(\"The following error occurred: \"+error);\r\n    });\r\n\r\n# Notes\r\n\r\n## Android permissions\r\n\r\nSome of functions offered by this plugin require specific permissions to be set in the AndroidManifest.xml. Where additional permissions are needed, they are listed alongside the function that requires them.\r\n\r\nThese permissions will not be set by this plugin, to avoid asking for unnecessary permissions in your app, in the case that you do not use a particular part of the plugin.\r\nInstead, you can add these permissions as necessary, depending what functions in the plugin you decide to use.\r\n\r\nYou can add these permissions either by manually editing the AndroidManifest.xml in `/platforms/android/`, or define them in the config.xml and apply them using the [cordova-custom-config](https://github.com/dpa99c/cordova-custom-config) plugin, for example:\r\n\r\n    <platform name=\"android\">\r\n        <plugin name=\"cordova-custom-config\" version=\"*\"/>\r\n        <config-file target=\"AndroidManifest.xml\" parent=\"/*\">\r\n            <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n            <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n        </config-file>\r\n    </platform>\r\n\r\n### Android runtime permissions\r\n\r\nAndroid 6 / API 23 introduces the concept of [runtime permissions](http://developer.android.com/training/permissions/requesting.html). Similar to iOS, certain \"dangerous\" permissions must be requested at runtime __in addition__ to being listed in the Android manifest.\r\n\r\nRuntime permissions only apply if the device/emulator the app is running on has Android 6.0 or above. If the app is running on Android 5.x or below, runtime permissions do not apply - all permissions are granted at installation time.\r\n\r\nThis plugin supports [checking](#getpermissionauthorizationstatus) and [requesting](#requestruntimepermission) of Android runtime permissions.\r\n\r\n#### \"Dangerous\" runtime permissions\r\n\r\nThe plugin defines the [full list of dangersous permissions available in API 23](http://developer.android.com/guide/topics/security/permissions.html#perm-groups) as a list of constants available via the `cordova.plugins.diagnostic.runtimePermission` object. The following permissions are available:\r\n\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_CALENDAR`\r\n- `cordova.plugins.diagnostic.runtimePermission.WRITE_CALENDAR`\r\n- `cordova.plugins.diagnostic.runtimePermission.CAMERA`\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_CONTACTS`\r\n- `cordova.plugins.diagnostic.runtimePermission.WRITE_CONTACTS`\r\n- `cordova.plugins.diagnostic.runtimePermission.GET_ACCOUNTS`\r\n- `cordova.plugins.diagnostic.runtimePermission.ACCESS_FINE_LOCATION`\r\n- `cordova.plugins.diagnostic.runtimePermission.ACCESS_COARSE_LOCATION`\r\n- `cordova.plugins.diagnostic.runtimePermission.RECORD_AUDIO`\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_PHONE_STATE`\r\n- `cordova.plugins.diagnostic.runtimePermission.CALL_PHONE`\r\n- `cordova.plugins.diagnostic.runtimePermission.ADD_VOICEMAIL`\r\n- `cordova.plugins.diagnostic.runtimePermission.USE_SIP`\r\n- `cordova.plugins.diagnostic.runtimePermission.PROCESS_OUTGOING_CALLS`\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_CALL_LOG`\r\n- `cordova.plugins.diagnostic.runtimePermission.WRITE_CALL_LOG`\r\n- `cordova.plugins.diagnostic.runtimePermission.SEND_SMS`\r\n- `cordova.plugins.diagnostic.runtimePermission.RECEIVE_SMS`\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_SMS`\r\n- `cordova.plugins.diagnostic.runtimePermission.RECEIVE_WAP_PUSH`\r\n- `cordova.plugins.diagnostic.runtimePermission.RECEIVE_MMS`\r\n- `cordova.plugins.diagnostic.runtimePermission.WRITE_EXTERNAL_STORAGE`\r\n- `cordova.plugins.diagnostic.runtimePermission.READ_EXTERNAL_STORAGE`\r\n- `cordova.plugins.diagnostic.runtimePermission.BODY_SENSORS`\r\n\r\n#### Runtime permission statuses\r\n\r\nA permission may have one of the following states, which are defined as constants by the `cordova.plugins.diagnostic.runtimePermissionStatus` object:\r\n\r\n- `cordova.plugins.diagnostic.runtimePermissionStatus.GRANTED` - Permission has already been granted, the device is running Android 5.x or below, or the app is built with API 22 or below.\r\n- `cordova.plugins.diagnostic.runtimePermissionStatus.NOT_REQUESTED` - App has not yet requested this permission. App can request permission and user will be prompted to allow/deny.\r\n- `cordova.plugins.diagnostic.runtimePermissionStatus.DENIED` - User denied access to this permission (without checking \"Never Ask Again\" box). App can request permission again and user will be prompted again to allow/deny again.\r\n- `cordova.plugins.diagnostic.runtimePermissionStatus.DENIED_ALWAYS` - User denied access to this permission and checked \"Never Ask Again\" box. App can never ask for permission again. The only way around this is to instruct the user to manually change the permission on the app permissions settings page.\r\n\r\n#### Runtime permission groups\r\n\r\nEach runtime permission belongs to a permission group. Requesting a permission also requests authorisation for all other permissions in that group. If other permissions in the group are not defined in the manifest, they will default to DENIED_ALWAYS status. Otherwise, if user grants permission, all other permissions in the group will be granted; if user denies permission, all other permissions in the group will be denied.\r\n\r\nPermissions are grouped as follows:\r\n\r\n    CALENDAR: [READ_CALENDAR, WRITE_CALENDAR],\r\n    CAMERA: [CAMERA],\r\n    CONTACTS: [READ_CONTACTS, WRITE_CONTACTS, GET_ACCOUNTS],\r\n    LOCATION: [ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION],\r\n    MICROPHONE: [RECORD_AUDIO],\r\n    PHONE: [READ_PHONE_STATE, CALL_PHONE, ADD_VOICEMAIL, USE_SIP, PROCESS_OUTGOING_CALLS, READ_CALL_LOG, WRITE_CALL_LOG],\r\n    SENSORS: [BODY_SENSORS],\r\n    SMS: [SEND_SMS, RECEIVE_SMS, READ_SMS, RECEIVE_WAP_PUSH, RECEIVE_MMS],\r\n    STORAGE: [READ_EXTERNAL_STORAGE, WRITE_EXTERNAL_STORAGE]\r\n\r\n#### Runtime permissions example project\r\n\r\nWhile the [cordova-diagnostic-plugin-example](https://github.com/dpa99c/cordova-diagnostic-plugin-example) illustrates use of runtime permissions in the context of requesting location and camera access, the [cordova-diagnostic-plugin-android-runtime-example](https://github.com/dpa99c/cordova-diagnostic-plugin-android-runtime-example) project explicitly illustrates use of Android runtime permissions with this plugin:\r\n\r\n[https://github.com/dpa99c/cordova-diagnostic-plugin-android-runtime-example](https://github.com/dpa99c/cordova-diagnostic-plugin-android-runtime-example)\r\n\r\n#### Android Camera permissions\r\n\r\nNote that the Android variant of [`requestCameraAuthorization()`](#requestcameraauthorization) requests the `READ_EXTERNAL_STORAGE` permission, in addition to the `CAMERA` permission.\r\nThis is because the [cordova-plugin-camera@2.2+](https://github.com/apache/cordova-plugin-camera) requires both of these permissions.\r\n\r\nSo to use this method in conjunction with the Cordova camera plugin, make sure you are using the most recent `cordova-plugin-camera` release: v2.2.0 or above.\r\n\r\n\r\n## Windows 10 Mobile permissions\r\n\r\nSome of functions offered by this plugin require specific permissions to be set in the package.windows10.appxmanifest. Where additional permissions are needed, they are listed alongside the function that requires them.\r\n\r\nThese permissions will not be set by this plugin, to avoid asking for unnecessary permissions in your app, in the case that you do not use a particular part of the plugin.\r\nInstead, you can add these permissions as necessary, depending what functions in the plugin you decide to use.\r\n\r\nYou can add these permissions by manually editing the package.windows10.appxmanifest in `/platforms/windows/`.\r\n\r\n## iOS location permission messages\r\n\r\nWhen location permission is requested on iOS 8+, a message is displayed to the user indicating the reason for the request. These messages are stored in the `{project}-Info.plist` file under the keys `NSLocationAlwaysUsageDescription` and `NSLocationWhenInUseUsageDescription`, which are displayed when requesting to use location **always** or **when in use**, respectively.\r\n\r\nUpon installing this plugin into your project, it will add the following default messages to your plist:\r\n\r\n- NSLocationAlwaysUsageDescription: \"This app requires constant access to your location in order to track your position, even when the screen is off.\"\r\n- NSLocationWhenInUseUsageDescription: \"This app will now only track your location when the screen is on and the app is displayed.\"\r\n\r\nTo override these defaults, you can either edit the messages directly in the plist file, or to persist the changes between platform updates, use my [cordova-custom-config](https://github.com/dpa99c/cordova-custom-config) plugin to add overrides directly from the config xml:\r\n\r\n`config.xml`\r\n\r\n    <platform name=\"ios\">\r\n        <plugin name=\"cordova-custom-config\" version=\"*\"/>\r\n        <config-file platform=\"ios\" target=\"*-Info.plist\" parent=\"NSLocationAlwaysUsageDescription\">\r\n            <string>My custom message for always using location.</string>\r\n        </config-file>\r\n        <config-file platform=\"ios\" target=\"*-Info.plist\" parent=\"NSLocationWhenInUseUsageDescription\">\r\n            <string>My custom message for using location when in use.</string>\r\n        </config-file>\r\n    </platform>\r\n\r\n# Example project\r\n\r\nAn example project illustrating use of this plugin can be found here: [https://github.com/dpa99c/cordova-diagnostic-plugin-example](https://github.com/dpa99c/cordova-diagnostic-plugin-example)\r\n\r\n## Screenshots\r\n\r\n### Android\r\n\r\n![Android screenshot](https://raw.githubusercontent.com/dpa99c/cordova-diagnostic-plugin-example/master/screenshots/android_1.png)\r\n![Android screenshot](https://raw.githubusercontent.com/dpa99c/cordova-diagnostic-plugin-example/master/screenshots/android_2.png)\r\n![Android screenshot](https://raw.githubusercontent.com/dpa99c/cordova-diagnostic-plugin-example/master/screenshots/android_3.png)\r\n\r\n### iOS\r\n\r\n![iOS screenshot](https://raw.githubusercontent.com/dpa99c/cordova-diagnostic-plugin-example/master/screenshots/ios_1.png)\r\n![iOS screenshot](https://raw.githubusercontent.com/dpa99c/cordova-diagnostic-plugin-example/master/screenshots/ios_2.png)\r\n\r\n# Release notes\r\n\r\nSee the [release notes wiki page](https://github.com/dpa99c/cordova-diagnostic-plugin/wiki/Release-notes)\r\n\r\n# Credits\r\n\r\nForked from: [https://github.com/mablack/cordova-diagnostic-plugin](https://github.com/mablack/cordova-diagnostic-plugin)\r\n\r\nOriginal Cordova 2 implementation by: AVANTIC ESTUDIO DE INGENIEROS ([www.avantic.net](http://www.avantic.net/))\r\n\r\nWindows 10 implementation by [Mike Dailor](https://github.com/mdailor) / [Next Wave Software, Inc.](http://nextwavesoftware.com/)\r\n\r\n# License\r\n================\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2015 Dave Alden / Working Edge Ltd.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dpa99c/cordova-diagnostic-plugin.git"
  },
  "version": "2.3.17"
}
